
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f64  08004f64  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f58  2000006c  08004fd8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fc4  08004fd8  00020fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107d0  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d58  00000000  00000000  000308af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b58  00000000  00000000  000344f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f972  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012655  00000000  00000000  000549c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0513  00000000  00000000  00067017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042a4  00000000  00000000  0012752c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e84 	.word	0x08004e84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08004e84 	.word	0x08004e84

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_FREERTOS_Init+0x2c>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	682b      	ldr	r3, [r5, #0]
 80005ce:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fba4 	bl	8002d22 <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <MX_FREERTOS_Init+0x30>)
 80005de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}
 80005e8:	08004ea8 	.word	0x08004ea8
 80005ec:	20000088 	.word	0x20000088

080005f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f002 fbb9 	bl	8002d70 <osDelay>
 80005fe:	e7fb      	b.n	80005f8 <StartDefaultTask+0x8>

08000600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a2a      	ldr	r2, [pc, #168]	; (80006c4 <MX_GPIO_Init+0xc4>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <MX_GPIO_Init+0xc4>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <MX_GPIO_Init+0xc4>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_GPIO_Init+0xc4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f000 fd53 	bl	8001128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000688:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_GPIO_Init+0xc8>)
 800069a:	f000 fbc3 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800069e:	2320      	movs	r3, #32
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f000 fbb4 	bl	8000e24 <HAL_GPIO_Init>

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000800 	.word	0x48000800

080006cc <LedTask>:
{
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch,1, HAL_MAX_DELAY);
	return ch;
}

void LedTask(void * pvParameters){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Noyau temps réel");
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <LedTask+0x28>)
 80006d6:	f003 fd61 	bl	800419c <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006da:	2120      	movs	r1, #32
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 fd3a 	bl	8001158 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f002 fd3d 	bl	8003164 <vTaskDelay>
		printf("Coucou");
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <LedTask+0x2c>)
 80006ec:	f003 fd56 	bl	800419c <iprintf>
		printf("Noyau temps réel");
 80006f0:	e7f0      	b.n	80006d4 <LedTask+0x8>
 80006f2:	bf00      	nop
 80006f4:	08004ebc 	.word	0x08004ebc
 80006f8:	08004ed0 	.word	0x08004ed0

080006fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xLegToggle;
	TaskHandle_t xHandle = NULL;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
	xLegToggle = xTaskCreate(
 8000706:	463b      	mov	r3, r7
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2300      	movs	r3, #0
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	2264      	movs	r2, #100	; 0x64
 8000712:	4909      	ldr	r1, [pc, #36]	; (8000738 <main+0x3c>)
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <main+0x40>)
 8000716:	f002 fbf3 	bl	8002f00 <xTaskCreate>
 800071a:	6078      	str	r0, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800071c:	f000 fa2d 	bl	8000b7a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000720:	f000 f80e 	bl	8000740 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000724:	f7ff ff6c 	bl	8000600 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000728:	f000 f95c 	bl	80009e4 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800072c:	f7ff ff46 	bl	80005bc <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000730:	f002 faf0 	bl	8002d14 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000734:	e7fe      	b.n	8000734 <main+0x38>
 8000736:	bf00      	nop
 8000738:	08004ed8 	.word	0x08004ed8
 800073c:	080006cd 	.word	0x080006cd

08000740 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2238      	movs	r2, #56	; 0x38
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fd79 	bl	8004246 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fd12 	bl	800118c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2340      	movs	r3, #64	; 0x40
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800077e:	2304      	movs	r3, #4
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000782:	2355      	movs	r3, #85	; 0x55
 8000784:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fdac 	bl	80012f4 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80007a2:	f000 f818 	bl	80007d6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f8b0 	bl	8001924 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80007ca:	f000 f804 	bl	80007d6 <Error_Handler>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	; 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007da:	b672      	cpsid	i
}
 80007dc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007de:	e7fe      	b.n	80007de <Error_Handler+0x8>

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x50>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <HAL_MspInit+0x50>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6613      	str	r3, [r2, #96]	; 0x60
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x50>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x50>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_MspInit+0x50>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x50>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 fada 	bl	8000dd6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000822:	f000 fd57 	bl	80012d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f9dc 	bl	8000c20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000868:	f002 ff6c 	bl	8003744 <xTaskGetSchedulerState>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d001      	beq.n	8000876 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000872:	f003 f9a9 	bl	8003bc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	e00a      	b.n	80008a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800088c:	f3af 8000 	nop.w
 8000890:	4601      	mov	r1, r0
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	60ba      	str	r2, [r7, #8]
 8000898:	b2ca      	uxtb	r2, r1
 800089a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3301      	adds	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbf0      	blt.n	800088c <_read+0x12>
  }

  return len;
 80008aa:	687b      	ldr	r3, [r7, #4]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e009      	b.n	80008da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	60ba      	str	r2, [r7, #8]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	dbf1      	blt.n	80008c6 <_write+0x12>
  }
  return len;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_close>:

int _close(int file)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000914:	605a      	str	r2, [r3, #4]
  return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_isatty>:

int _isatty(int file)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800092c:	2301      	movs	r3, #1
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f003 fcae 	bl	80042e4 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20008000 	.word	0x20008000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	20000fc8 	.word	0x20000fc8

080009c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 80009ea:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <MX_LPUART1_UART_Init+0x90>)
 80009ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a26:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a28:	f001 fb88 	bl	800213c <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f7ff fed0 	bl	80007d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a3a:	f002 f889 	bl	8002b50 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a44:	f7ff fec7 	bl	80007d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a4c:	f002 f8be 	bl	8002bcc <HAL_UARTEx_SetRxFifoThreshold>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a56:	f7ff febe 	bl	80007d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_LPUART1_UART_Init+0x8c>)
 8000a5c:	f002 f83f 	bl	8002ade <HAL_UARTEx_DisableFifoMode>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a66:	f7ff feb6 	bl	80007d6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000090 	.word	0x20000090
 8000a74:	40008000 	.word	0x40008000

08000a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09a      	sub	sp, #104	; 0x68
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2244      	movs	r2, #68	; 0x44
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fbd4 	bl	8004246 <memset>
  if(uartHandle->Instance==LPUART1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <HAL_UART_MspInit+0xa8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d136      	bne.n	8000b16 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 f951 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac0:	f7ff fe89 	bl	80007d6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0xac>)
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0xac>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0xac>)
 8000ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_MspInit+0xac>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0xac>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_UART_MspInit+0xac>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000af4:	230c      	movs	r3, #12
 8000af6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b04:	230c      	movs	r3, #12
 8000b06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 f987 	bl	8000e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3768      	adds	r7, #104	; 0x68
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40008000 	.word	0x40008000
 8000b24:	40021000 	.word	0x40021000

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0b      	ldr	r4, [pc, #44]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b52:	f7ff ff35 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f003 fbcb 	bl	80042f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fdcf 	bl	80006fc <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b6c:	08004f6c 	.word	0x08004f6c
  ldr r2, =_sbss
 8000b70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b74:	20000fc4 	.word	0x20000fc4

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>

08000b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f91b 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f000 f80e 	bl	8000bac <HAL_InitTick>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	e001      	b.n	8000ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9c:	f7ff fe20 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_InitTick+0x68>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d022      	beq.n	8000c06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_InitTick+0x6c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_InitTick+0x68>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f918 	bl	8000e0a <HAL_SYSTICK_Config>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10f      	bne.n	8000c00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d809      	bhi.n	8000bfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be6:	2200      	movs	r2, #0
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	f04f 30ff 	mov.w	r0, #4294967295
 8000bee:	f000 f8f2 	bl	8000dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_InitTick+0x70>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e007      	b.n	8000c0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e004      	b.n	8000c0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e001      	b.n	8000c0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000120 	.word	0x20000120

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff47 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff5e 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff90 	bl	8000d14 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5f 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb2 	bl	8000d7c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e32:	e15a      	b.n	80010ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 814c 	beq.w	80010e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80a6 	beq.w	80010e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a5a      	ldr	r2, [pc, #360]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa4:	4b58      	ldr	r3, [pc, #352]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb0:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fda:	d01f      	beq.n	800101c <HAL_GPIO_Init+0x1f8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x1f4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1f0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4a      	ldr	r2, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x2f4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2fc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e4>
 8001004:	2305      	movs	r3, #5
 8001006:	e00a      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001008:	2306      	movs	r3, #6
 800100a:	e008      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 800100c:	2304      	movs	r3, #4
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001010:	2303      	movs	r3, #3
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001014:	2302      	movs	r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x1fa>
 800101c:	2300      	movs	r3, #0
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102e:	4937      	ldr	r1, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <HAL_GPIO_Init+0x300>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001060:	4a30      	ldr	r2, [pc, #192]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108a:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_GPIO_Init+0x300>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_GPIO_Init+0x300>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_GPIO_Init+0x300>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f ae9d 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	48000c00 	.word	0x48000c00
 800111c:	48001000 	.word	0x48001000
 8001120:	48001400 	.word	0x48001400
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001144:	e002      	b.n	800114c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43d9      	mvns	r1, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	400b      	ands	r3, r1
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d141      	bne.n	800121e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a6:	d131      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a8:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ae:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c0:	4a41      	ldr	r2, [pc, #260]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c8:	4b40      	ldr	r3, [pc, #256]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2232      	movs	r2, #50	; 0x32
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011de:	e002      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f2:	d102      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f2      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001206:	d158      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e057      	b.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001212:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800121c:	e04d      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001224:	d141      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001232:	d131      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124c:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2232      	movs	r2, #50	; 0x32
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126a:	e002      	b.n	8001272 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3b01      	subs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127e:	d102      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f2      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d112      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e011      	b.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012a8:	e007      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40007000 	.word	0x40007000
 80012cc:	20000000 	.word	0x20000000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e2:	6093      	str	r3, [r2, #8]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40007000 	.word	0x40007000

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e306      	b.n	8001914 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001312:	4b97      	ldr	r3, [pc, #604]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800131c:	4b94      	ldr	r3, [pc, #592]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d102      	bne.n	8001332 <HAL_RCC_OscConfig+0x3e>
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d002      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05b      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d157      	bne.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e2e1      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x74>
 800135a:	4b85      	ldr	r3, [pc, #532]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a84      	ldr	r2, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 800138c:	4b78      	ldr	r3, [pc, #480]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a77      	ldr	r2, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b75      	ldr	r3, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a74      	ldr	r2, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc4a 	bl	8000c44 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc46 	bl	8000c44 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e2a6      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc36 	bl	8000c44 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc32 	bl	8000c44 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e292      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	4b60      	ldr	r3, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d075      	beq.n	80014f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b0c      	cmp	r3, #12
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x136>
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d002      	beq.n	8001430 <HAL_RCC_OscConfig+0x13c>
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d11f      	bne.n	8001470 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001430:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x154>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e265      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	4946      	ldr	r1, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_RCC_OscConfig+0x280>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fba3 	bl	8000bac <HAL_InitTick>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d043      	beq.n	80014f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e251      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d023      	beq.n	80014c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a3c      	ldr	r2, [pc, #240]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fbde 	bl	8000c44 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fbda 	bl	8000c44 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e23a      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	061b      	lsls	r3, r3, #24
 80014b8:	492d      	ldr	r1, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e01a      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80014c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbba 	bl	8000c44 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fbb6 	bl	8000c44 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e216      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1e0>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d041      	beq.n	8001586 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01c      	beq.n	8001544 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff fb93 	bl	8000c44 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fb8f 	bl	8000c44 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1ef      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0ef      	beq.n	8001522 <HAL_RCC_OscConfig+0x22e>
 8001542:	e020      	b.n	8001586 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x27c>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fb76 	bl	8000c44 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800155a:	e00d      	b.n	8001578 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fb72 	bl	8000c44 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d906      	bls.n	8001578 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1d2      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001578:	4b8c      	ldr	r3, [pc, #560]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ea      	bne.n	800155c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80a6 	beq.w	80016e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001598:	4b84      	ldr	r3, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2b4>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2b6>
 80015a8:	2300      	movs	r3, #0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00d      	beq.n	80015ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ca:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <HAL_RCC_OscConfig+0x4bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x4bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x4bc>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb2f 	bl	8000c44 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fb2b 	bl	8000c44 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e18b      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x4bc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d108      	bne.n	8001622 <HAL_RCC_OscConfig+0x32e>
 8001610:	4b66      	ldr	r3, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	4a65      	ldr	r2, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001620:	e024      	b.n	800166c <HAL_RCC_OscConfig+0x378>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d110      	bne.n	800164c <HAL_RCC_OscConfig+0x358>
 800162a:	4b60      	ldr	r3, [pc, #384]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	4a5a      	ldr	r2, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164a:	e00f      	b.n	800166c <HAL_RCC_OscConfig+0x378>
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001652:	4a56      	ldr	r2, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001662:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d016      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fae6 	bl	8000c44 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff fae2 	bl	8000c44 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e140      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001692:	4b46      	ldr	r3, [pc, #280]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ed      	beq.n	800167c <HAL_RCC_OscConfig+0x388>
 80016a0:	e015      	b.n	80016ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff facf 	bl	8000c44 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff facb 	bl	8000c44 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e129      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ed      	bne.n	80016aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b35      	ldr	r3, [pc, #212]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	4a34      	ldr	r2, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03c      	beq.n	8001766 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01c      	beq.n	800172e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80016f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fa9e 	bl	8000c44 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170c:	f7ff fa9a 	bl	8000c44 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e0fa      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ef      	beq.n	800170c <HAL_RCC_OscConfig+0x418>
 800172c:	e01b      	b.n	8001766 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff fa81 	bl	8000c44 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001746:	f7ff fa7d 	bl	8000c44 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0dd      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800175a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1ef      	bne.n	8001746 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80d1 	beq.w	8001912 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b0c      	cmp	r3, #12
 800177a:	f000 808b 	beq.w	8001894 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d15e      	bne.n	8001844 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x4b8>)
 800178c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fa57 	bl	8000c44 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001798:	e00c      	b.n	80017b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fa53 	bl	8000c44 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d905      	bls.n	80017b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0b3      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_OscConfig+0x628>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ec      	bne.n	800179a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_OscConfig+0x628>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <HAL_RCC_OscConfig+0x62c>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6a11      	ldr	r1, [r2, #32]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d0:	3a01      	subs	r2, #1
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017da:	0212      	lsls	r2, r2, #8
 80017dc:	4311      	orrs	r1, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017e2:	0852      	lsrs	r2, r2, #1
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0552      	lsls	r2, r2, #21
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ee:	0852      	lsrs	r2, r2, #1
 80017f0:	3a01      	subs	r2, #1
 80017f2:	0652      	lsls	r2, r2, #25
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017fa:	06d2      	lsls	r2, r2, #27
 80017fc:	430a      	orrs	r2, r1
 80017fe:	4947      	ldr	r1, [pc, #284]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001800:	4313      	orrs	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x628>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a41      	ldr	r2, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fa12 	bl	8000c44 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fa0e 	bl	8000c44 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e06e      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x530>
 8001842:	e066      	b.n	8001912 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a34      	ldr	r2, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x628>)
 800184a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a31      	ldr	r2, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_RCC_OscConfig+0x628>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a2e      	ldr	r2, [pc, #184]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001862:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f9ea 	bl	8000c44 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f9e6 	bl	8000c44 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e046      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_OscConfig+0x628>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x580>
 8001892:	e03e      	b.n	8001912 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e039      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_RCC_OscConfig+0x628>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d12c      	bne.n	800190e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	3b01      	subs	r3, #1
 80018c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d123      	bne.n	800190e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11b      	bne.n	800190e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d113      	bne.n	800190e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d109      	bne.n	800190e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	019f800c 	.word	0x019f800c

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e11e      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d910      	bls.n	800196c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 020f 	bic.w	r2, r3, #15
 8001952:	498c      	ldr	r1, [pc, #560]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b8a      	ldr	r3, [pc, #552]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e106      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d073      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d129      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0f4      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001990:	f000 f99e 	bl	8001cd0 <RCC_GetSysClockFreqFromPLLSource>
 8001994:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4a7c      	ldr	r2, [pc, #496]	; (8001b8c <HAL_RCC_ClockConfig+0x268>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d93f      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800199e:	4b7a      	ldr	r3, [pc, #488]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d033      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d12f      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c6:	4a70      	ldr	r2, [pc, #448]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e024      	b.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0c6      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0be      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019fc:	f000 f8ce 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4a61      	ldr	r2, [pc, #388]	; (8001b8c <HAL_RCC_ClockConfig+0x268>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d909      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a12:	4a5d      	ldr	r2, [pc, #372]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4957      	ldr	r1, [pc, #348]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7ff f908 	bl	8000c44 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff f904 	bl	8000c44 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e095      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a78:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a42      	ldr	r2, [pc, #264]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a98:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4936      	ldr	r1, [pc, #216]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b80      	cmp	r3, #128	; 0x80
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aba:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a32      	ldr	r2, [pc, #200]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d21d      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 020f 	bic.w	r2, r3, #15
 8001adc:	4929      	ldr	r1, [pc, #164]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f8ae 	bl	8000c44 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff f8aa 	bl	8000c44 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e03b      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1ed      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4917      	ldr	r1, [pc, #92]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490f      	ldr	r1, [pc, #60]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4e:	f000 f825 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490c      	ldr	r1, [pc, #48]	; (8001b90 <HAL_RCC_ClockConfig+0x26c>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x270>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_ClockConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f81a 	bl	8000bac <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	04c4b400 	.word	0x04c4b400
 8001b90:	08004ee8 	.word	0x08004ee8
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e047      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e03e      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d136      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3301      	adds	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	4a16      	ldr	r2, [pc, #88]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfa:	68d2      	ldr	r2, [r2, #12]
 8001bfc:	0a12      	lsrs	r2, r2, #8
 8001bfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
      break;
 8001c08:	e00c      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	0a12      	lsrs	r2, r2, #8
 8001c18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
      break;
 8001c22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0e5b      	lsrs	r3, r3, #25
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e001      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	016e3600 	.word	0x016e3600

08001c60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08004ef8 	.word	0x08004ef8

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca8:	f7ff ffda 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0adb      	lsrs	r3, r3, #11
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08004ef8 	.word	0x08004ef8

08001cd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d10c      	bne.n	8001d0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cfe:	68d2      	ldr	r2, [r2, #12]
 8001d00:	0a12      	lsrs	r2, r2, #8
 8001d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
    break;
 8001d0c:	e00c      	b.n	8001d28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d18:	68d2      	ldr	r2, [r2, #12]
 8001d1a:	0a12      	lsrs	r2, r2, #8
 8001d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    break;
 8001d26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0e5b      	lsrs	r3, r3, #25
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000
 8001d54:	016e3600 	.word	0x016e3600
 8001d58:	00f42400 	.word	0x00f42400

08001d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d64:	2300      	movs	r3, #0
 8001d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d68:	2300      	movs	r3, #0
 8001d6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8098 	beq.w	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db2:	f7fe ff47 	bl	8000c44 <HAL_GetTick>
 8001db6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db8:	e009      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7fe ff43 	bl	8000c44 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d902      	bls.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	74fb      	strb	r3, [r7, #19]
        break;
 8001dcc:	e005      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ef      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dda:	7cfb      	ldrb	r3, [r7, #19]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d159      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01e      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff03 	bl	8000c44 <HAL_GetTick>
 8001e3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e40:	e00b      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe feff 	bl	8000c44 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d902      	bls.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	74fb      	strb	r3, [r7, #19]
            break;
 8001e58:	e006      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ec      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e68:	7cfb      	ldrb	r3, [r7, #19]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4903      	ldr	r1, [pc, #12]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e84:	e008      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e86:	7cfb      	ldrb	r3, [r7, #19]
 8001e88:	74bb      	strb	r3, [r7, #18]
 8001e8a:	e005      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e98:	7c7b      	ldrb	r3, [r7, #17]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4aa5      	ldr	r2, [pc, #660]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb6:	4ba0      	ldr	r3, [pc, #640]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	f023 0203 	bic.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	499c      	ldr	r1, [pc, #624]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ed8:	4b97      	ldr	r3, [pc, #604]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	f023 020c 	bic.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4994      	ldr	r1, [pc, #592]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001efa:	4b8f      	ldr	r3, [pc, #572]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	498b      	ldr	r1, [pc, #556]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f1c:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	4983      	ldr	r1, [pc, #524]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f3e:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	497a      	ldr	r1, [pc, #488]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f60:	4b75      	ldr	r3, [pc, #468]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4972      	ldr	r1, [pc, #456]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4969      	ldr	r1, [pc, #420]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fa4:	4b64      	ldr	r3, [pc, #400]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4961      	ldr	r1, [pc, #388]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	4958      	ldr	r1, [pc, #352]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4950      	ldr	r1, [pc, #320]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a4a      	ldr	r2, [pc, #296]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002020:	4b45      	ldr	r3, [pc, #276]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4942      	ldr	r1, [pc, #264]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800203e:	d105      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a3c      	ldr	r2, [pc, #240]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002058:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002082:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	4926      	ldr	r1, [pc, #152]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ae:	d105      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a20      	ldr	r2, [pc, #128]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	4918      	ldr	r1, [pc, #96]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e6:	d105      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d015      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800211e:	d105      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800212c:	7cbb      	ldrb	r3, [r7, #18]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e042      	b.n	80021d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fe fc89 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2224      	movs	r2, #36	; 0x24
 800216a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f82c 	bl	80021dc <UART_SetConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e022      	b.n	80021d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 faec 	bl	8002774 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fb73 	bl	80028b8 <UART_CheckIdleState>
 80021d2:	4603      	mov	r3, r0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e0:	b08c      	sub	sp, #48	; 0x30
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4313      	orrs	r3, r2
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4bab      	ldr	r3, [pc, #684]	; (80024b8 <UART_SetConfig+0x2dc>)
 800220c:	4013      	ands	r3, r2
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002214:	430b      	orrs	r3, r1
 8002216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4aa0      	ldr	r2, [pc, #640]	; (80024bc <UART_SetConfig+0x2e0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002244:	4313      	orrs	r3, r2
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002252:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800225c:	430b      	orrs	r3, r1
 800225e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f023 010f 	bic.w	r1, r3, #15
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a91      	ldr	r2, [pc, #580]	; (80024c0 <UART_SetConfig+0x2e4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d125      	bne.n	80022cc <UART_SetConfig+0xf0>
 8002280:	4b90      	ldr	r3, [pc, #576]	; (80024c4 <UART_SetConfig+0x2e8>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b03      	cmp	r3, #3
 800228c:	d81a      	bhi.n	80022c4 <UART_SetConfig+0xe8>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <UART_SetConfig+0xb8>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022a5 	.word	0x080022a5
 8002298:	080022b5 	.word	0x080022b5
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022bd 	.word	0x080022bd
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022aa:	e0d6      	b.n	800245a <UART_SetConfig+0x27e>
 80022ac:	2302      	movs	r3, #2
 80022ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022b2:	e0d2      	b.n	800245a <UART_SetConfig+0x27e>
 80022b4:	2304      	movs	r3, #4
 80022b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ba:	e0ce      	b.n	800245a <UART_SetConfig+0x27e>
 80022bc:	2308      	movs	r3, #8
 80022be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c2:	e0ca      	b.n	800245a <UART_SetConfig+0x27e>
 80022c4:	2310      	movs	r3, #16
 80022c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ca:	e0c6      	b.n	800245a <UART_SetConfig+0x27e>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7d      	ldr	r2, [pc, #500]	; (80024c8 <UART_SetConfig+0x2ec>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d138      	bne.n	8002348 <UART_SetConfig+0x16c>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <UART_SetConfig+0x2e8>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	d82d      	bhi.n	8002340 <UART_SetConfig+0x164>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <UART_SetConfig+0x110>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002321 	.word	0x08002321
 80022f0:	08002341 	.word	0x08002341
 80022f4:	08002341 	.word	0x08002341
 80022f8:	08002341 	.word	0x08002341
 80022fc:	08002331 	.word	0x08002331
 8002300:	08002341 	.word	0x08002341
 8002304:	08002341 	.word	0x08002341
 8002308:	08002341 	.word	0x08002341
 800230c:	08002329 	.word	0x08002329
 8002310:	08002341 	.word	0x08002341
 8002314:	08002341 	.word	0x08002341
 8002318:	08002341 	.word	0x08002341
 800231c:	08002339 	.word	0x08002339
 8002320:	2300      	movs	r3, #0
 8002322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002326:	e098      	b.n	800245a <UART_SetConfig+0x27e>
 8002328:	2302      	movs	r3, #2
 800232a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800232e:	e094      	b.n	800245a <UART_SetConfig+0x27e>
 8002330:	2304      	movs	r3, #4
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002336:	e090      	b.n	800245a <UART_SetConfig+0x27e>
 8002338:	2308      	movs	r3, #8
 800233a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800233e:	e08c      	b.n	800245a <UART_SetConfig+0x27e>
 8002340:	2310      	movs	r3, #16
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002346:	e088      	b.n	800245a <UART_SetConfig+0x27e>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <UART_SetConfig+0x2f0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d125      	bne.n	800239e <UART_SetConfig+0x1c2>
 8002352:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <UART_SetConfig+0x2e8>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800235c:	2b30      	cmp	r3, #48	; 0x30
 800235e:	d016      	beq.n	800238e <UART_SetConfig+0x1b2>
 8002360:	2b30      	cmp	r3, #48	; 0x30
 8002362:	d818      	bhi.n	8002396 <UART_SetConfig+0x1ba>
 8002364:	2b20      	cmp	r3, #32
 8002366:	d00a      	beq.n	800237e <UART_SetConfig+0x1a2>
 8002368:	2b20      	cmp	r3, #32
 800236a:	d814      	bhi.n	8002396 <UART_SetConfig+0x1ba>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <UART_SetConfig+0x19a>
 8002370:	2b10      	cmp	r3, #16
 8002372:	d008      	beq.n	8002386 <UART_SetConfig+0x1aa>
 8002374:	e00f      	b.n	8002396 <UART_SetConfig+0x1ba>
 8002376:	2300      	movs	r3, #0
 8002378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237c:	e06d      	b.n	800245a <UART_SetConfig+0x27e>
 800237e:	2302      	movs	r3, #2
 8002380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002384:	e069      	b.n	800245a <UART_SetConfig+0x27e>
 8002386:	2304      	movs	r3, #4
 8002388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800238c:	e065      	b.n	800245a <UART_SetConfig+0x27e>
 800238e:	2308      	movs	r3, #8
 8002390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002394:	e061      	b.n	800245a <UART_SetConfig+0x27e>
 8002396:	2310      	movs	r3, #16
 8002398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800239c:	e05d      	b.n	800245a <UART_SetConfig+0x27e>
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <UART_SetConfig+0x2f4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d125      	bne.n	80023f4 <UART_SetConfig+0x218>
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <UART_SetConfig+0x2e8>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023b2:	2bc0      	cmp	r3, #192	; 0xc0
 80023b4:	d016      	beq.n	80023e4 <UART_SetConfig+0x208>
 80023b6:	2bc0      	cmp	r3, #192	; 0xc0
 80023b8:	d818      	bhi.n	80023ec <UART_SetConfig+0x210>
 80023ba:	2b80      	cmp	r3, #128	; 0x80
 80023bc:	d00a      	beq.n	80023d4 <UART_SetConfig+0x1f8>
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d814      	bhi.n	80023ec <UART_SetConfig+0x210>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <UART_SetConfig+0x1f0>
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d008      	beq.n	80023dc <UART_SetConfig+0x200>
 80023ca:	e00f      	b.n	80023ec <UART_SetConfig+0x210>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d2:	e042      	b.n	800245a <UART_SetConfig+0x27e>
 80023d4:	2302      	movs	r3, #2
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023da:	e03e      	b.n	800245a <UART_SetConfig+0x27e>
 80023dc:	2304      	movs	r3, #4
 80023de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023e2:	e03a      	b.n	800245a <UART_SetConfig+0x27e>
 80023e4:	2308      	movs	r3, #8
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ea:	e036      	b.n	800245a <UART_SetConfig+0x27e>
 80023ec:	2310      	movs	r3, #16
 80023ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023f2:	e032      	b.n	800245a <UART_SetConfig+0x27e>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a30      	ldr	r2, [pc, #192]	; (80024bc <UART_SetConfig+0x2e0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d12a      	bne.n	8002454 <UART_SetConfig+0x278>
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <UART_SetConfig+0x2e8>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800240c:	d01a      	beq.n	8002444 <UART_SetConfig+0x268>
 800240e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002412:	d81b      	bhi.n	800244c <UART_SetConfig+0x270>
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002418:	d00c      	beq.n	8002434 <UART_SetConfig+0x258>
 800241a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800241e:	d815      	bhi.n	800244c <UART_SetConfig+0x270>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <UART_SetConfig+0x250>
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002428:	d008      	beq.n	800243c <UART_SetConfig+0x260>
 800242a:	e00f      	b.n	800244c <UART_SetConfig+0x270>
 800242c:	2300      	movs	r3, #0
 800242e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002432:	e012      	b.n	800245a <UART_SetConfig+0x27e>
 8002434:	2302      	movs	r3, #2
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800243a:	e00e      	b.n	800245a <UART_SetConfig+0x27e>
 800243c:	2304      	movs	r3, #4
 800243e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002442:	e00a      	b.n	800245a <UART_SetConfig+0x27e>
 8002444:	2308      	movs	r3, #8
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800244a:	e006      	b.n	800245a <UART_SetConfig+0x27e>
 800244c:	2310      	movs	r3, #16
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002452:	e002      	b.n	800245a <UART_SetConfig+0x27e>
 8002454:	2310      	movs	r3, #16
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <UART_SetConfig+0x2e0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	f040 80a8 	bne.w	80025b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800246a:	2b08      	cmp	r3, #8
 800246c:	d834      	bhi.n	80024d8 <UART_SetConfig+0x2fc>
 800246e:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <UART_SetConfig+0x298>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	08002499 	.word	0x08002499
 8002478:	080024d9 	.word	0x080024d9
 800247c:	080024a1 	.word	0x080024a1
 8002480:	080024d9 	.word	0x080024d9
 8002484:	080024a7 	.word	0x080024a7
 8002488:	080024d9 	.word	0x080024d9
 800248c:	080024d9 	.word	0x080024d9
 8002490:	080024d9 	.word	0x080024d9
 8002494:	080024af 	.word	0x080024af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002498:	f7ff fbee 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800249e:	e021      	b.n	80024e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <UART_SetConfig+0x2f8>)
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80024a4:	e01e      	b.n	80024e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024a6:	f7ff fb79 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80024ac:	e01a      	b.n	80024e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80024b4:	e016      	b.n	80024e4 <UART_SetConfig+0x308>
 80024b6:	bf00      	nop
 80024b8:	cfff69f3 	.word	0xcfff69f3
 80024bc:	40008000 	.word	0x40008000
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40004400 	.word	0x40004400
 80024cc:	40004800 	.word	0x40004800
 80024d0:	40004c00 	.word	0x40004c00
 80024d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80024e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 812a 	beq.w	8002740 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	4a9e      	ldr	r2, [pc, #632]	; (800276c <UART_SetConfig+0x590>)
 80024f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	429a      	cmp	r2, r3
 800250e:	d305      	bcc.n	800251c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	429a      	cmp	r2, r3
 800251a:	d903      	bls.n	8002524 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002522:	e10d      	b.n	8002740 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	2200      	movs	r2, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	4a8e      	ldr	r2, [pc, #568]	; (800276c <UART_SetConfig+0x590>)
 8002532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002536:	b29b      	uxth	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002546:	f7fd febb 	bl	80002c0 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	020b      	lsls	r3, r1, #8
 800255c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002560:	0202      	lsls	r2, r0, #8
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	6849      	ldr	r1, [r1, #4]
 8002566:	0849      	lsrs	r1, r1, #1
 8002568:	2000      	movs	r0, #0
 800256a:	460c      	mov	r4, r1
 800256c:	4605      	mov	r5, r0
 800256e:	eb12 0804 	adds.w	r8, r2, r4
 8002572:	eb43 0905 	adc.w	r9, r3, r5
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	469a      	mov	sl, r3
 800257e:	4693      	mov	fp, r2
 8002580:	4652      	mov	r2, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4640      	mov	r0, r8
 8002586:	4649      	mov	r1, r9
 8002588:	f7fd fe9a 	bl	80002c0 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800259a:	d308      	bcc.n	80025ae <UART_SetConfig+0x3d2>
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a2:	d204      	bcs.n	80025ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	e0c8      	b.n	8002740 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80025b4:	e0c4      	b.n	8002740 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025be:	d167      	bne.n	8002690 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80025c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d828      	bhi.n	800261a <UART_SetConfig+0x43e>
 80025c8:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <UART_SetConfig+0x3f4>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	080025f5 	.word	0x080025f5
 80025d4:	080025fd 	.word	0x080025fd
 80025d8:	08002605 	.word	0x08002605
 80025dc:	0800261b 	.word	0x0800261b
 80025e0:	0800260b 	.word	0x0800260b
 80025e4:	0800261b 	.word	0x0800261b
 80025e8:	0800261b 	.word	0x0800261b
 80025ec:	0800261b 	.word	0x0800261b
 80025f0:	08002613 	.word	0x08002613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f4:	f7ff fb40 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025fa:	e014      	b.n	8002626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025fc:	f7ff fb52 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002602:	e010      	b.n	8002626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002604:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <UART_SetConfig+0x594>)
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002608:	e00d      	b.n	8002626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800260a:	f7ff fac7 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002610:	e009      	b.n	8002626 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002618:	e005      	b.n	8002626 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8089 	beq.w	8002740 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	4a4e      	ldr	r2, [pc, #312]	; (800276c <UART_SetConfig+0x590>)
 8002634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002638:	461a      	mov	r2, r3
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002640:	005a      	lsls	r2, r3, #1
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	441a      	add	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b0f      	cmp	r3, #15
 8002658:	d916      	bls.n	8002688 <UART_SetConfig+0x4ac>
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d212      	bcs.n	8002688 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f023 030f 	bic.w	r3, r3, #15
 800266a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	b29b      	uxth	r3, r3
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	b29a      	uxth	r2, r3
 8002678:	8bfb      	ldrh	r3, [r7, #30]
 800267a:	4313      	orrs	r3, r2
 800267c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	8bfa      	ldrh	r2, [r7, #30]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e05b      	b.n	8002740 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800268e:	e057      	b.n	8002740 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002694:	2b08      	cmp	r3, #8
 8002696:	d828      	bhi.n	80026ea <UART_SetConfig+0x50e>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <UART_SetConfig+0x4c4>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026c5 	.word	0x080026c5
 80026a4:	080026cd 	.word	0x080026cd
 80026a8:	080026d5 	.word	0x080026d5
 80026ac:	080026eb 	.word	0x080026eb
 80026b0:	080026db 	.word	0x080026db
 80026b4:	080026eb 	.word	0x080026eb
 80026b8:	080026eb 	.word	0x080026eb
 80026bc:	080026eb 	.word	0x080026eb
 80026c0:	080026e3 	.word	0x080026e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c4:	f7ff fad8 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 80026c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026ca:	e014      	b.n	80026f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026cc:	f7ff faea 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026d2:	e010      	b.n	80026f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <UART_SetConfig+0x594>)
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026d8:	e00d      	b.n	80026f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026da:	f7ff fa5f 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026e0:	e009      	b.n	80026f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026e8:	e005      	b.n	80026f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80026f4:	bf00      	nop
    }

    if (pclk != 0U)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d021      	beq.n	8002740 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	4a1a      	ldr	r2, [pc, #104]	; (800276c <UART_SetConfig+0x590>)
 8002702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002706:	461a      	mov	r2, r3
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	fbb3 f2f2 	udiv	r2, r3, r2
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	441a      	add	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b0f      	cmp	r3, #15
 8002724:	d909      	bls.n	800273a <UART_SetConfig+0x55e>
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d205      	bcs.n	800273a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	b29a      	uxth	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60da      	str	r2, [r3, #12]
 8002738:	e002      	b.n	8002740 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2201      	movs	r2, #1
 8002744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2201      	movs	r2, #1
 800274c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800275c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002760:	4618      	mov	r0, r3
 8002762:	3730      	adds	r7, #48	; 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800276a:	bf00      	nop
 800276c:	08004f00 	.word	0x08004f00
 8002770:	00f42400 	.word	0x00f42400

08002774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01a      	beq.n	800288a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002872:	d10a      	bne.n	800288a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028c8:	f7fe f9bc 	bl	8000c44 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d10e      	bne.n	80028fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f82f 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e025      	b.n	8002946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	d10e      	bne.n	8002926 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f819 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b09c      	sub	sp, #112	; 0x70
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295e:	e0a9      	b.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	f000 80a5 	beq.w	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe f96b 	bl	8000c44 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <UART_WaitOnFlagUntilTimeout+0x32>
 800297a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297c:	2b00      	cmp	r3, #0
 800297e:	d140      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002994:	667b      	str	r3, [r7, #100]	; 0x64
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80029ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e6      	bne.n	8002980 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3308      	adds	r3, #8
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3308      	adds	r3, #8
 80029d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80029d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80029d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80029e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e5      	bne.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e069      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d051      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1e:	d149      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e6      	bne.n	8002a2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3308      	adds	r3, #8
 8002a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3308      	adds	r3, #8
 8002a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a7c:	623a      	str	r2, [r7, #32]
 8002a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	69f9      	ldr	r1, [r7, #28]
 8002a82:	6a3a      	ldr	r2, [r7, #32]
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e5      	bne.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e010      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4013      	ands	r3, r2
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	f43f af46 	beq.w	8002960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3770      	adds	r7, #112	; 0x70
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_UARTEx_DisableFifoMode+0x16>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e027      	b.n	8002b44 <HAL_UARTEx_DisableFifoMode+0x66>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002b22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e02d      	b.n	8002bc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f84f 	bl	8002c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e02d      	b.n	8002c40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f811 	bl	8002c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d108      	bne.n	8002c6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c68:	e031      	b.n	8002cce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c6e:	2308      	movs	r3, #8
 8002c70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	0e5b      	lsrs	r3, r3, #25
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	0f5b      	lsrs	r3, r3, #29
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	7b3a      	ldrb	r2, [r7, #12]
 8002c96:	4911      	ldr	r1, [pc, #68]	; (8002cdc <UARTEx_SetNbDataToProcess+0x94>)
 8002c98:	5c8a      	ldrb	r2, [r1, r2]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c9e:	7b3a      	ldrb	r2, [r7, #12]
 8002ca0:	490f      	ldr	r1, [pc, #60]	; (8002ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8002ca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ca4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	7b7a      	ldrb	r2, [r7, #13]
 8002cb4:	4909      	ldr	r1, [pc, #36]	; (8002cdc <UARTEx_SetNbDataToProcess+0x94>)
 8002cb6:	5c8a      	ldrb	r2, [r1, r2]
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002cbc:	7b7a      	ldrb	r2, [r7, #13]
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8002cc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	08004f18 	.word	0x08004f18
 8002ce0:	08004f20 	.word	0x08004f20

08002ce4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	2b84      	cmp	r3, #132	; 0x84
 8002cf8:	d005      	beq.n	8002d06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002cfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	3303      	adds	r3, #3
 8002d04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d18:	f000 fa58 	bl	80031cc <vTaskStartScheduler>
  
  return osOK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af02      	add	r7, sp, #8
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685c      	ldr	r4, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d38:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ffcf 	bl	8002ce4 <makeFreeRtosPriority>
 8002d46:	4602      	mov	r2, r0
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	9200      	str	r2, [sp, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4632      	mov	r2, r6
 8002d54:	4629      	mov	r1, r5
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 f8d2 	bl	8002f00 <xTaskCreate>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e000      	b.n	8002d68 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <osDelay+0x16>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	e000      	b.n	8002d88 <osDelay+0x18>
 8002d86:	2301      	movs	r3, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f9eb 	bl	8003164 <vTaskDelay>
  
  return osOK;
 8002d8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f103 0208 	add.w	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 0208 	add.w	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f103 0208 	add.w	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d103      	bne.n	8002e5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e00c      	b.n	8002e74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e002      	b.n	8002e68 <vListInsert+0x2e>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d2f6      	bcs.n	8002e62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	601a      	str	r2, [r3, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6852      	ldr	r2, [r2, #4]
 8002ecc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d103      	bne.n	8002ee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	; 0x30
 8002f04:	af04      	add	r7, sp, #16
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fea7 	bl	8003c68 <pvPortMalloc>
 8002f1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f22:	2054      	movs	r0, #84	; 0x54
 8002f24:	f000 fea0 	bl	8003c68 <pvPortMalloc>
 8002f28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
 8002f36:	e005      	b.n	8002f44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f38:	6978      	ldr	r0, [r7, #20]
 8002f3a:	f000 ff61 	bl	8003e00 <vPortFree>
 8002f3e:	e001      	b.n	8002f44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d013      	beq.n	8002f72 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9303      	str	r3, [sp, #12]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f80e 	bl	8002f82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f66:	69f8      	ldr	r0, [r7, #28]
 8002f68:	f000 f892 	bl	8003090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e002      	b.n	8002f78 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f78:	69bb      	ldr	r3, [r7, #24]
	}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b088      	sub	sp, #32
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01f      	beq.n	8003010 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e012      	b.n	8002ffc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	7819      	ldrb	r1, [r3, #0]
 8002fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3334      	adds	r3, #52	; 0x34
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	d9e9      	bls.n	8002fd6 <prvInitialiseNewTask+0x54>
 8003002:	e000      	b.n	8003006 <prvInitialiseNewTask+0x84>
			{
				break;
 8003004:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800300e:	e003      	b.n	8003018 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	2b06      	cmp	r3, #6
 800301c:	d901      	bls.n	8003022 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800301e:	2306      	movs	r3, #6
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2200      	movs	r2, #0
 8003032:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	3304      	adds	r3, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fecd 	bl	8002dd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	3318      	adds	r3, #24
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fec8 	bl	8002dd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	f1c3 0207 	rsb	r2, r3, #7
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	2200      	movs	r2, #0
 8003062:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	69b8      	ldr	r0, [r7, #24]
 8003072:	f000 fbeb 	bl	800384c <pxPortInitialiseStack>
 8003076:	4602      	mov	r2, r0
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003098:	f000 fd04 	bl	8003aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800309c:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <prvAddNewTaskToReadyList+0xb8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a29      	ldr	r2, [pc, #164]	; (8003148 <prvAddNewTaskToReadyList+0xb8>)
 80030a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030ae:	4a27      	ldr	r2, [pc, #156]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <prvAddNewTaskToReadyList+0xb8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d110      	bne.n	80030de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030bc:	f000 faa4 	bl	8003608 <prvInitialiseTaskLists>
 80030c0:	e00d      	b.n	80030de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <prvAddNewTaskToReadyList+0xc0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d802      	bhi.n	80030de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <prvAddNewTaskToReadyList+0xc4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <prvAddNewTaskToReadyList+0xc4>)
 80030e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <prvAddNewTaskToReadyList+0xc8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <prvAddNewTaskToReadyList+0xc8>)
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <prvAddNewTaskToReadyList+0xcc>)
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f7ff fe6e 	bl	8002df2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003116:	f000 fcf5 	bl	8003b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <prvAddNewTaskToReadyList+0xc0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00e      	beq.n	8003140 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <prvAddNewTaskToReadyList+0xbc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <prvAddNewTaskToReadyList+0xd0>)
 8003132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000224 	.word	0x20000224
 800314c:	20000124 	.word	0x20000124
 8003150:	20000230 	.word	0x20000230
 8003154:	20000240 	.word	0x20000240
 8003158:	2000022c 	.word	0x2000022c
 800315c:	20000128 	.word	0x20000128
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <vTaskDelay+0x60>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <vTaskDelay+0x30>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	60bb      	str	r3, [r7, #8]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003194:	f000 f862 	bl	800325c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003198:	2100      	movs	r1, #0
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 faf0 	bl	8003780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031a0:	f000 f86a 	bl	8003278 <xTaskResumeAll>
 80031a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <vTaskDelay+0x64>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000024c 	.word	0x2000024c
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <vTaskStartScheduler+0x78>)
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	491a      	ldr	r1, [pc, #104]	; (8003248 <vTaskStartScheduler+0x7c>)
 80031e0:	481a      	ldr	r0, [pc, #104]	; (800324c <vTaskStartScheduler+0x80>)
 80031e2:	f7ff fe8d 	bl	8002f00 <xTaskCreate>
 80031e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d116      	bne.n	800321c <vTaskStartScheduler+0x50>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	60bb      	str	r3, [r7, #8]
}
 8003200:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <vTaskStartScheduler+0x84>)
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <vTaskStartScheduler+0x88>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <vTaskStartScheduler+0x8c>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003216:	f000 fba3 	bl	8003960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800321a:	e00e      	b.n	800323a <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d10a      	bne.n	800323a <vTaskStartScheduler+0x6e>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	607b      	str	r3, [r7, #4]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <vTaskStartScheduler+0x6c>
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000248 	.word	0x20000248
 8003248:	08004ee0 	.word	0x08004ee0
 800324c:	080035d9 	.word	0x080035d9
 8003250:	20000244 	.word	0x20000244
 8003254:	20000230 	.word	0x20000230
 8003258:	20000228 	.word	0x20000228

0800325c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <vTaskSuspendAll+0x18>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	4a03      	ldr	r2, [pc, #12]	; (8003274 <vTaskSuspendAll+0x18>)
 8003268:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	2000024c 	.word	0x2000024c

08003278 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <xTaskResumeAll+0x114>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	603b      	str	r3, [r7, #0]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032a4:	f000 fbfe 	bl	8003aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <xTaskResumeAll+0x114>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4a37      	ldr	r2, [pc, #220]	; (800338c <xTaskResumeAll+0x114>)
 80032b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <xTaskResumeAll+0x114>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d161      	bne.n	800337e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ba:	4b35      	ldr	r3, [pc, #212]	; (8003390 <xTaskResumeAll+0x118>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d05d      	beq.n	800337e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032c2:	e02e      	b.n	8003322 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b33      	ldr	r3, [pc, #204]	; (8003394 <xTaskResumeAll+0x11c>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3318      	adds	r3, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fdeb 	bl	8002eac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3304      	adds	r3, #4
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fde6 	bl	8002eac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <xTaskResumeAll+0x120>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <xTaskResumeAll+0x120>)
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4a27      	ldr	r2, [pc, #156]	; (800339c <xTaskResumeAll+0x124>)
 8003300:	441a      	add	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7ff fd72 	bl	8002df2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <xTaskResumeAll+0x128>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	429a      	cmp	r2, r3
 800331a:	d302      	bcc.n	8003322 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <xTaskResumeAll+0x12c>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <xTaskResumeAll+0x11c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1cc      	bne.n	80032c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003330:	f000 f9e8 	bl	8003704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <xTaskResumeAll+0x130>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003340:	f000 f836 	bl	80033b0 <xTaskIncrementTick>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <xTaskResumeAll+0x12c>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f1      	bne.n	8003340 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <xTaskResumeAll+0x130>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <xTaskResumeAll+0x12c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800336a:	2301      	movs	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <xTaskResumeAll+0x134>)
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800337e:	f000 fbc1 	bl	8003b04 <vPortExitCritical>

	return xAlreadyYielded;
 8003382:	68bb      	ldr	r3, [r7, #8]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	2000024c 	.word	0x2000024c
 8003390:	20000224 	.word	0x20000224
 8003394:	200001e4 	.word	0x200001e4
 8003398:	2000022c 	.word	0x2000022c
 800339c:	20000128 	.word	0x20000128
 80033a0:	20000124 	.word	0x20000124
 80033a4:	20000238 	.word	0x20000238
 80033a8:	20000234 	.word	0x20000234
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <xTaskIncrementTick+0x144>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 808e 	bne.w	80034e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033c4:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <xTaskIncrementTick+0x148>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033cc:	4a4a      	ldr	r2, [pc, #296]	; (80034f8 <xTaskIncrementTick+0x148>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d120      	bne.n	800341a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033d8:	4b48      	ldr	r3, [pc, #288]	; (80034fc <xTaskIncrementTick+0x14c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	603b      	str	r3, [r7, #0]
}
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xTaskIncrementTick+0x46>
 80033f8:	4b40      	ldr	r3, [pc, #256]	; (80034fc <xTaskIncrementTick+0x14c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <xTaskIncrementTick+0x150>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <xTaskIncrementTick+0x14c>)
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4a3e      	ldr	r2, [pc, #248]	; (8003500 <xTaskIncrementTick+0x150>)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <xTaskIncrementTick+0x154>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <xTaskIncrementTick+0x154>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	f000 f975 	bl	8003704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <xTaskIncrementTick+0x158>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	d348      	bcc.n	80034b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <xTaskIncrementTick+0x14c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <xTaskIncrementTick+0x158>)
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	601a      	str	r2, [r3, #0]
					break;
 8003436:	e03e      	b.n	80034b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <xTaskIncrementTick+0x14c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d203      	bcs.n	8003458 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003450:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <xTaskIncrementTick+0x158>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003456:	e02e      	b.n	80034b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fd25 	bl	8002eac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3318      	adds	r3, #24
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fd1c 	bl	8002eac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	2201      	movs	r2, #1
 800347a:	409a      	lsls	r2, r3
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <xTaskIncrementTick+0x15c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	4a22      	ldr	r2, [pc, #136]	; (800350c <xTaskIncrementTick+0x15c>)
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <xTaskIncrementTick+0x160>)
 8003494:	441a      	add	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	3304      	adds	r3, #4
 800349a:	4619      	mov	r1, r3
 800349c:	4610      	mov	r0, r2
 800349e:	f7ff fca8 	bl	8002df2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <xTaskIncrementTick+0x164>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3b9      	bcc.n	8003424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b4:	e7b6      	b.n	8003424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <xTaskIncrementTick+0x164>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	4914      	ldr	r1, [pc, #80]	; (8003510 <xTaskIncrementTick+0x160>)
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d901      	bls.n	80034d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80034ce:	2301      	movs	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <xTaskIncrementTick+0x168>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e004      	b.n	80034ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <xTaskIncrementTick+0x16c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a0d      	ldr	r2, [pc, #52]	; (800351c <xTaskIncrementTick+0x16c>)
 80034e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034ea:	697b      	ldr	r3, [r7, #20]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000024c 	.word	0x2000024c
 80034f8:	20000228 	.word	0x20000228
 80034fc:	200001dc 	.word	0x200001dc
 8003500:	200001e0 	.word	0x200001e0
 8003504:	2000023c 	.word	0x2000023c
 8003508:	20000244 	.word	0x20000244
 800350c:	2000022c 	.word	0x2000022c
 8003510:	20000128 	.word	0x20000128
 8003514:	20000124 	.word	0x20000124
 8003518:	20000238 	.word	0x20000238
 800351c:	20000234 	.word	0x20000234

08003520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <vTaskSwitchContext+0xa4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <vTaskSwitchContext+0xa8>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003534:	e03f      	b.n	80035b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <vTaskSwitchContext+0xa8>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <vTaskSwitchContext+0xac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	f1c3 031f 	rsb	r3, r3, #31
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	491f      	ldr	r1, [pc, #124]	; (80035d0 <vTaskSwitchContext+0xb0>)
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	607b      	str	r3, [r7, #4]
}
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <vTaskSwitchContext+0x5a>
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <vTaskSwitchContext+0xb0>)
 8003588:	4413      	add	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3308      	adds	r3, #8
 800359e:	429a      	cmp	r2, r3
 80035a0:	d104      	bne.n	80035ac <vTaskSwitchContext+0x8c>
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <vTaskSwitchContext+0xb4>)
 80035b4:	6013      	str	r3, [r2, #0]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	2000024c 	.word	0x2000024c
 80035c8:	20000238 	.word	0x20000238
 80035cc:	2000022c 	.word	0x2000022c
 80035d0:	20000128 	.word	0x20000128
 80035d4:	20000124 	.word	0x20000124

080035d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035e0:	f000 f852 	bl	8003688 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <prvIdleTask+0x28>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d9f9      	bls.n	80035e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <prvIdleTask+0x2c>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035fc:	e7f0      	b.n	80035e0 <prvIdleTask+0x8>
 80035fe:	bf00      	nop
 8003600:	20000128 	.word	0x20000128
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	e00c      	b.n	800362e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <prvInitialiseTaskLists+0x60>)
 8003620:	4413      	add	r3, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fbb8 	bl	8002d98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3301      	adds	r3, #1
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d9ef      	bls.n	8003614 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003634:	480d      	ldr	r0, [pc, #52]	; (800366c <prvInitialiseTaskLists+0x64>)
 8003636:	f7ff fbaf 	bl	8002d98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800363a:	480d      	ldr	r0, [pc, #52]	; (8003670 <prvInitialiseTaskLists+0x68>)
 800363c:	f7ff fbac 	bl	8002d98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003640:	480c      	ldr	r0, [pc, #48]	; (8003674 <prvInitialiseTaskLists+0x6c>)
 8003642:	f7ff fba9 	bl	8002d98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003646:	480c      	ldr	r0, [pc, #48]	; (8003678 <prvInitialiseTaskLists+0x70>)
 8003648:	f7ff fba6 	bl	8002d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800364c:	480b      	ldr	r0, [pc, #44]	; (800367c <prvInitialiseTaskLists+0x74>)
 800364e:	f7ff fba3 	bl	8002d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <prvInitialiseTaskLists+0x78>)
 8003654:	4a05      	ldr	r2, [pc, #20]	; (800366c <prvInitialiseTaskLists+0x64>)
 8003656:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <prvInitialiseTaskLists+0x7c>)
 800365a:	4a05      	ldr	r2, [pc, #20]	; (8003670 <prvInitialiseTaskLists+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000128 	.word	0x20000128
 800366c:	200001b4 	.word	0x200001b4
 8003670:	200001c8 	.word	0x200001c8
 8003674:	200001e4 	.word	0x200001e4
 8003678:	200001f8 	.word	0x200001f8
 800367c:	20000210 	.word	0x20000210
 8003680:	200001dc 	.word	0x200001dc
 8003684:	200001e0 	.word	0x200001e0

08003688 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800368e:	e019      	b.n	80036c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003690:	f000 fa08 	bl	8003aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <prvCheckTasksWaitingTermination+0x50>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fc03 	bl	8002eac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <prvCheckTasksWaitingTermination+0x54>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <prvCheckTasksWaitingTermination+0x54>)
 80036ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <prvCheckTasksWaitingTermination+0x58>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <prvCheckTasksWaitingTermination+0x58>)
 80036b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036ba:	f000 fa23 	bl	8003b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f810 	bl	80036e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <prvCheckTasksWaitingTermination+0x58>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e1      	bne.n	8003690 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200001f8 	.word	0x200001f8
 80036dc:	20000224 	.word	0x20000224
 80036e0:	2000020c 	.word	0x2000020c

080036e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fb85 	bl	8003e00 <vPortFree>
			vPortFree( pxTCB );
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fb82 	bl	8003e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <prvResetNextTaskUnblockTime+0x38>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <prvResetNextTaskUnblockTime+0x3c>)
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800371c:	e008      	b.n	8003730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <prvResetNextTaskUnblockTime+0x38>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <prvResetNextTaskUnblockTime+0x3c>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	200001dc 	.word	0x200001dc
 8003740:	20000244 	.word	0x20000244

08003744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <xTaskGetSchedulerState+0x34>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003752:	2301      	movs	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	e008      	b.n	800376a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <xTaskGetSchedulerState+0x38>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003760:	2302      	movs	r3, #2
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	e001      	b.n	800376a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800376a:	687b      	ldr	r3, [r7, #4]
	}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20000230 	.word	0x20000230
 800377c:	2000024c 	.word	0x2000024c

08003780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <prvAddCurrentTaskToDelayedList+0xb0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003790:	4b28      	ldr	r3, [pc, #160]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fb88 	bl	8002eac <uxListRemove>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2201      	movs	r2, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4013      	ands	r3, r2
 80037b6:	4a20      	ldr	r2, [pc, #128]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d10a      	bne.n	80037d8 <prvAddCurrentTaskToDelayedList+0x58>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	481a      	ldr	r0, [pc, #104]	; (800383c <prvAddCurrentTaskToDelayedList+0xbc>)
 80037d2:	f7ff fb0e 	bl	8002df2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037d6:	e026      	b.n	8003826 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d209      	bcs.n	8003804 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7ff fb1c 	bl	8002e3a <vListInsert>
}
 8003802:	e010      	b.n	8003826 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff fb12 	bl	8002e3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d202      	bcs.n	8003826 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6013      	str	r3, [r2, #0]
}
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000228 	.word	0x20000228
 8003834:	20000124 	.word	0x20000124
 8003838:	2000022c 	.word	0x2000022c
 800383c:	20000210 	.word	0x20000210
 8003840:	200001e0 	.word	0x200001e0
 8003844:	200001dc 	.word	0x200001dc
 8003848:	20000244 	.word	0x20000244

0800384c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3b04      	subs	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3b04      	subs	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3b04      	subs	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <pxPortInitialiseStack+0x64>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b14      	subs	r3, #20
 8003886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b04      	subs	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b20      	subs	r3, #32
 80038a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	080038b5 	.word	0x080038b5

080038b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <prvTaskExitError+0x54>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d00a      	beq.n	80038de <prvTaskExitError+0x2a>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	60fb      	str	r3, [r7, #12]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <prvTaskExitError+0x28>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60bb      	str	r3, [r7, #8]
}
 80038f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038f2:	bf00      	nop
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0fc      	beq.n	80038f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	2000000c 	.word	0x2000000c
 800390c:	00000000 	.word	0x00000000

08003910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <pxCurrentTCBConst2>)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391a:	f380 8809 	msr	PSP, r0
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	4770      	bx	lr
 800392c:	f3af 8000 	nop.w

08003930 <pxCurrentTCBConst2>:
 8003930:	20000124 	.word	0x20000124
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop

08003938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003938:	4808      	ldr	r0, [pc, #32]	; (800395c <prvPortStartFirstTask+0x24>)
 800393a:	6800      	ldr	r0, [r0, #0]
 800393c:	6800      	ldr	r0, [r0, #0]
 800393e:	f380 8808 	msr	MSP, r0
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f380 8814 	msr	CONTROL, r0
 800394a:	b662      	cpsie	i
 800394c:	b661      	cpsie	f
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	df00      	svc	0
 8003958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800395a:	bf00      	nop
 800395c:	e000ed08 	.word	0xe000ed08

08003960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003966:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <xPortStartScheduler+0x120>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <xPortStartScheduler+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d10a      	bne.n	8003986 <xPortStartScheduler+0x26>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	613b      	str	r3, [r7, #16]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003986:	4b3e      	ldr	r3, [pc, #248]	; (8003a80 <xPortStartScheduler+0x120>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <xPortStartScheduler+0x128>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10a      	bne.n	80039a6 <xPortStartScheduler+0x46>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60fb      	str	r3, [r7, #12]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <xPortStartScheduler+0x12c>)
 80039a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <xPortStartScheduler+0x130>)
 80039cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039ce:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <xPortStartScheduler+0x134>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039d4:	e009      	b.n	80039ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <xPortStartScheduler+0x134>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <xPortStartScheduler+0x134>)
 80039de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d0ef      	beq.n	80039d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <xPortStartScheduler+0x134>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00a      	beq.n	8003a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60bb      	str	r3, [r7, #8]
}
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <xPortStartScheduler+0x134>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <xPortStartScheduler+0x134>)
 8003a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <xPortStartScheduler+0x134>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <xPortStartScheduler+0x134>)
 8003a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <xPortStartScheduler+0x138>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <xPortStartScheduler+0x138>)
 8003a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <xPortStartScheduler+0x138>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <xPortStartScheduler+0x138>)
 8003a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a4e:	f000 f8dd 	bl	8003c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <xPortStartScheduler+0x13c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a58:	f000 f8fc 	bl	8003c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <xPortStartScheduler+0x140>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <xPortStartScheduler+0x140>)
 8003a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a68:	f7ff ff66 	bl	8003938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a6c:	f7ff fd58 	bl	8003520 <vTaskSwitchContext>
	prvTaskExitError();
 8003a70:	f7ff ff20 	bl	80038b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	e000ed00 	.word	0xe000ed00
 8003a84:	410fc271 	.word	0x410fc271
 8003a88:	410fc270 	.word	0x410fc270
 8003a8c:	e000e400 	.word	0xe000e400
 8003a90:	20000250 	.word	0x20000250
 8003a94:	20000254 	.word	0x20000254
 8003a98:	e000ed20 	.word	0xe000ed20
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	e000ef34 	.word	0xe000ef34

08003aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
}
 8003abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <vPortEnterCritical+0x58>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <vPortEnterCritical+0x58>)
 8003ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <vPortEnterCritical+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10f      	bne.n	8003af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <vPortEnterCritical+0x5c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	603b      	str	r3, [r7, #0]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <vPortEnterCritical+0x4a>
	}
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	2000000c 	.word	0x2000000c
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <vPortExitCritical+0x50>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <vPortExitCritical+0x24>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	607b      	str	r3, [r7, #4]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <vPortExitCritical+0x50>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <vPortExitCritical+0x50>)
 8003b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <vPortExitCritical+0x50>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <vPortExitCritical+0x42>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2000000c 	.word	0x2000000c
	...

08003b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b60:	f3ef 8009 	mrs	r0, PSP
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <pxCurrentTCBConst>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	f01e 0f10 	tst.w	lr, #16
 8003b70:	bf08      	it	eq
 8003b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7a:	6010      	str	r0, [r2, #0]
 8003b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b84:	f380 8811 	msr	BASEPRI, r0
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f7ff fcc6 	bl	8003520 <vTaskSwitchContext>
 8003b94:	f04f 0000 	mov.w	r0, #0
 8003b98:	f380 8811 	msr	BASEPRI, r0
 8003b9c:	bc09      	pop	{r0, r3}
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6808      	ldr	r0, [r1, #0]
 8003ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba6:	f01e 0f10 	tst.w	lr, #16
 8003baa:	bf08      	it	eq
 8003bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bb0:	f380 8809 	msr	PSP, r0
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	f3af 8000 	nop.w

08003bc0 <pxCurrentTCBConst>:
 8003bc0:	20000124 	.word	0x20000124
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	607b      	str	r3, [r7, #4]
}
 8003be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003be2:	f7ff fbe5 	bl	80033b0 <xTaskIncrementTick>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <xPortSysTickHandler+0x40>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f383 8811 	msr	BASEPRI, r3
}
 8003bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <vPortSetupTimerInterrupt+0x34>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <vPortSetupTimerInterrupt+0x38>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <vPortSetupTimerInterrupt+0x3c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <vPortSetupTimerInterrupt+0x40>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <vPortSetupTimerInterrupt+0x44>)
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c2e:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <vPortSetupTimerInterrupt+0x34>)
 8003c30:	2207      	movs	r2, #7
 8003c32:	601a      	str	r2, [r3, #0]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e010 	.word	0xe000e010
 8003c44:	e000e018 	.word	0xe000e018
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	10624dd3 	.word	0x10624dd3
 8003c50:	e000e014 	.word	0xe000e014

08003c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c64 <vPortEnableVFP+0x10>
 8003c58:	6801      	ldr	r1, [r0, #0]
 8003c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c5e:	6001      	str	r1, [r0, #0]
 8003c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c62:	bf00      	nop
 8003c64:	e000ed88 	.word	0xe000ed88

08003c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c74:	f7ff faf2 	bl	800325c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c78:	4b5b      	ldr	r3, [pc, #364]	; (8003de8 <pvPortMalloc+0x180>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c80:	f000 f920 	bl	8003ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <pvPortMalloc+0x184>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 8093 	bne.w	8003db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01d      	beq.n	8003cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c98:	2208      	movs	r2, #8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d014      	beq.n	8003cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f023 0307 	bic.w	r3, r3, #7
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	617b      	str	r3, [r7, #20]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d06e      	beq.n	8003db8 <pvPortMalloc+0x150>
 8003cda:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <pvPortMalloc+0x188>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d869      	bhi.n	8003db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <pvPortMalloc+0x18c>)
 8003ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ce8:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <pvPortMalloc+0x18c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cee:	e004      	b.n	8003cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d903      	bls.n	8003d0c <pvPortMalloc+0xa4>
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f1      	bne.n	8003cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <pvPortMalloc+0x180>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d050      	beq.n	8003db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	4413      	add	r3, r2
 8003d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	1ad2      	subs	r2, r2, r3
 8003d30:	2308      	movs	r3, #8
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d91f      	bls.n	8003d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <pvPortMalloc+0xf8>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	613b      	str	r3, [r7, #16]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1ad2      	subs	r2, r2, r3
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d72:	69b8      	ldr	r0, [r7, #24]
 8003d74:	f000 f908 	bl	8003f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <pvPortMalloc+0x188>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <pvPortMalloc+0x188>)
 8003d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <pvPortMalloc+0x188>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <pvPortMalloc+0x190>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d203      	bcs.n	8003d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <pvPortMalloc+0x188>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <pvPortMalloc+0x190>)
 8003d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <pvPortMalloc+0x184>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <pvPortMalloc+0x194>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <pvPortMalloc+0x194>)
 8003db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003db8:	f7ff fa5e 	bl	8003278 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <pvPortMalloc+0x174>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60fb      	str	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <pvPortMalloc+0x172>
	return pvReturn;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	; 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000e60 	.word	0x20000e60
 8003dec:	20000e74 	.word	0x20000e74
 8003df0:	20000e64 	.word	0x20000e64
 8003df4:	20000e58 	.word	0x20000e58
 8003df8:	20000e68 	.word	0x20000e68
 8003dfc:	20000e6c 	.word	0x20000e6c

08003e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04d      	beq.n	8003eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e12:	2308      	movs	r3, #8
 8003e14:	425b      	negs	r3, r3
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4413      	add	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <vPortFree+0xb8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <vPortFree+0x44>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60fb      	str	r3, [r7, #12]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <vPortFree+0x62>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	60bb      	str	r3, [r7, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <vPortFree+0xb8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01e      	beq.n	8003eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11a      	bne.n	8003eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <vPortFree+0xb8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e88:	f7ff f9e8 	bl	800325c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <vPortFree+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <vPortFree+0xbc>)
 8003e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e9a:	6938      	ldr	r0, [r7, #16]
 8003e9c:	f000 f874 	bl	8003f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <vPortFree+0xc0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a06      	ldr	r2, [pc, #24]	; (8003ec0 <vPortFree+0xc0>)
 8003ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eaa:	f7ff f9e5 	bl	8003278 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000e74 	.word	0x20000e74
 8003ebc:	20000e64 	.word	0x20000e64
 8003ec0:	20000e70 	.word	0x20000e70

08003ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <prvHeapInit+0xac>)
 8003ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0307 	bic.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <prvHeapInit+0xac>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <prvHeapInit+0xb0>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <prvHeapInit+0xb0>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f10:	2208      	movs	r2, #8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <prvHeapInit+0xb4>)
 8003f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <prvHeapInit+0xb4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <prvHeapInit+0xb4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <prvHeapInit+0xb4>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <prvHeapInit+0xb8>)
 8003f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <prvHeapInit+0xbc>)
 8003f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <prvHeapInit+0xc0>)
 8003f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f62:	601a      	str	r2, [r3, #0]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	20000258 	.word	0x20000258
 8003f74:	20000e58 	.word	0x20000e58
 8003f78:	20000e60 	.word	0x20000e60
 8003f7c:	20000e68 	.word	0x20000e68
 8003f80:	20000e64 	.word	0x20000e64
 8003f84:	20000e74 	.word	0x20000e74

08003f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <prvInsertBlockIntoFreeList+0xac>)
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e002      	b.n	8003f9c <prvInsertBlockIntoFreeList+0x14>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d8f7      	bhi.n	8003f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d108      	bne.n	8003fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	441a      	add	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	441a      	add	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d118      	bne.n	8004010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <prvInsertBlockIntoFreeList+0xb0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d00d      	beq.n	8004006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e008      	b.n	8004018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <prvInsertBlockIntoFreeList+0xb0>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e003      	b.n	8004018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d002      	beq.n	8004026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000e58 	.word	0x20000e58
 8004038:	20000e60 	.word	0x20000e60

0800403c <std>:
 800403c:	2300      	movs	r3, #0
 800403e:	b510      	push	{r4, lr}
 8004040:	4604      	mov	r4, r0
 8004042:	e9c0 3300 	strd	r3, r3, [r0]
 8004046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800404a:	6083      	str	r3, [r0, #8]
 800404c:	8181      	strh	r1, [r0, #12]
 800404e:	6643      	str	r3, [r0, #100]	; 0x64
 8004050:	81c2      	strh	r2, [r0, #14]
 8004052:	6183      	str	r3, [r0, #24]
 8004054:	4619      	mov	r1, r3
 8004056:	2208      	movs	r2, #8
 8004058:	305c      	adds	r0, #92	; 0x5c
 800405a:	f000 f8f4 	bl	8004246 <memset>
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <std+0x38>)
 8004060:	6263      	str	r3, [r4, #36]	; 0x24
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <std+0x3c>)
 8004064:	62a3      	str	r3, [r4, #40]	; 0x28
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <std+0x40>)
 8004068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <std+0x44>)
 800406c:	6224      	str	r4, [r4, #32]
 800406e:	6323      	str	r3, [r4, #48]	; 0x30
 8004070:	bd10      	pop	{r4, pc}
 8004072:	bf00      	nop
 8004074:	080041c1 	.word	0x080041c1
 8004078:	080041e3 	.word	0x080041e3
 800407c:	0800421b 	.word	0x0800421b
 8004080:	0800423f 	.word	0x0800423f

08004084 <stdio_exit_handler>:
 8004084:	4a02      	ldr	r2, [pc, #8]	; (8004090 <stdio_exit_handler+0xc>)
 8004086:	4903      	ldr	r1, [pc, #12]	; (8004094 <stdio_exit_handler+0x10>)
 8004088:	4803      	ldr	r0, [pc, #12]	; (8004098 <stdio_exit_handler+0x14>)
 800408a:	f000 b869 	b.w	8004160 <_fwalk_sglue>
 800408e:	bf00      	nop
 8004090:	20000010 	.word	0x20000010
 8004094:	08004be1 	.word	0x08004be1
 8004098:	2000001c 	.word	0x2000001c

0800409c <cleanup_stdio>:
 800409c:	6841      	ldr	r1, [r0, #4]
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <cleanup_stdio+0x34>)
 80040a0:	4299      	cmp	r1, r3
 80040a2:	b510      	push	{r4, lr}
 80040a4:	4604      	mov	r4, r0
 80040a6:	d001      	beq.n	80040ac <cleanup_stdio+0x10>
 80040a8:	f000 fd9a 	bl	8004be0 <_fflush_r>
 80040ac:	68a1      	ldr	r1, [r4, #8]
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <cleanup_stdio+0x38>)
 80040b0:	4299      	cmp	r1, r3
 80040b2:	d002      	beq.n	80040ba <cleanup_stdio+0x1e>
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 fd93 	bl	8004be0 <_fflush_r>
 80040ba:	68e1      	ldr	r1, [r4, #12]
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <cleanup_stdio+0x3c>)
 80040be:	4299      	cmp	r1, r3
 80040c0:	d004      	beq.n	80040cc <cleanup_stdio+0x30>
 80040c2:	4620      	mov	r0, r4
 80040c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c8:	f000 bd8a 	b.w	8004be0 <_fflush_r>
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	bf00      	nop
 80040d0:	20000e78 	.word	0x20000e78
 80040d4:	20000ee0 	.word	0x20000ee0
 80040d8:	20000f48 	.word	0x20000f48

080040dc <global_stdio_init.part.0>:
 80040dc:	b510      	push	{r4, lr}
 80040de:	4b0b      	ldr	r3, [pc, #44]	; (800410c <global_stdio_init.part.0+0x30>)
 80040e0:	4c0b      	ldr	r4, [pc, #44]	; (8004110 <global_stdio_init.part.0+0x34>)
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <global_stdio_init.part.0+0x38>)
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	4620      	mov	r0, r4
 80040e8:	2200      	movs	r2, #0
 80040ea:	2104      	movs	r1, #4
 80040ec:	f7ff ffa6 	bl	800403c <std>
 80040f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80040f4:	2201      	movs	r2, #1
 80040f6:	2109      	movs	r1, #9
 80040f8:	f7ff ffa0 	bl	800403c <std>
 80040fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004100:	2202      	movs	r2, #2
 8004102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004106:	2112      	movs	r1, #18
 8004108:	f7ff bf98 	b.w	800403c <std>
 800410c:	20000fb0 	.word	0x20000fb0
 8004110:	20000e78 	.word	0x20000e78
 8004114:	08004085 	.word	0x08004085

08004118 <__sfp_lock_acquire>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__sfp_lock_acquire+0x8>)
 800411a:	f000 b90d 	b.w	8004338 <__retarget_lock_acquire_recursive>
 800411e:	bf00      	nop
 8004120:	20000fb9 	.word	0x20000fb9

08004124 <__sfp_lock_release>:
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <__sfp_lock_release+0x8>)
 8004126:	f000 b908 	b.w	800433a <__retarget_lock_release_recursive>
 800412a:	bf00      	nop
 800412c:	20000fb9 	.word	0x20000fb9

08004130 <__sinit>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4604      	mov	r4, r0
 8004134:	f7ff fff0 	bl	8004118 <__sfp_lock_acquire>
 8004138:	6a23      	ldr	r3, [r4, #32]
 800413a:	b11b      	cbz	r3, 8004144 <__sinit+0x14>
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004140:	f7ff bff0 	b.w	8004124 <__sfp_lock_release>
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <__sinit+0x28>)
 8004146:	6223      	str	r3, [r4, #32]
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <__sinit+0x2c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f5      	bne.n	800413c <__sinit+0xc>
 8004150:	f7ff ffc4 	bl	80040dc <global_stdio_init.part.0>
 8004154:	e7f2      	b.n	800413c <__sinit+0xc>
 8004156:	bf00      	nop
 8004158:	0800409d 	.word	0x0800409d
 800415c:	20000fb0 	.word	0x20000fb0

08004160 <_fwalk_sglue>:
 8004160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004164:	4607      	mov	r7, r0
 8004166:	4688      	mov	r8, r1
 8004168:	4614      	mov	r4, r2
 800416a:	2600      	movs	r6, #0
 800416c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004170:	f1b9 0901 	subs.w	r9, r9, #1
 8004174:	d505      	bpl.n	8004182 <_fwalk_sglue+0x22>
 8004176:	6824      	ldr	r4, [r4, #0]
 8004178:	2c00      	cmp	r4, #0
 800417a:	d1f7      	bne.n	800416c <_fwalk_sglue+0xc>
 800417c:	4630      	mov	r0, r6
 800417e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004182:	89ab      	ldrh	r3, [r5, #12]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d907      	bls.n	8004198 <_fwalk_sglue+0x38>
 8004188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800418c:	3301      	adds	r3, #1
 800418e:	d003      	beq.n	8004198 <_fwalk_sglue+0x38>
 8004190:	4629      	mov	r1, r5
 8004192:	4638      	mov	r0, r7
 8004194:	47c0      	blx	r8
 8004196:	4306      	orrs	r6, r0
 8004198:	3568      	adds	r5, #104	; 0x68
 800419a:	e7e9      	b.n	8004170 <_fwalk_sglue+0x10>

0800419c <iprintf>:
 800419c:	b40f      	push	{r0, r1, r2, r3}
 800419e:	b507      	push	{r0, r1, r2, lr}
 80041a0:	4906      	ldr	r1, [pc, #24]	; (80041bc <iprintf+0x20>)
 80041a2:	ab04      	add	r3, sp, #16
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041aa:	6881      	ldr	r1, [r0, #8]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	f000 f9e7 	bl	8004580 <_vfiprintf_r>
 80041b2:	b003      	add	sp, #12
 80041b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041b8:	b004      	add	sp, #16
 80041ba:	4770      	bx	lr
 80041bc:	20000068 	.word	0x20000068

080041c0 <__sread>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	460c      	mov	r4, r1
 80041c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c8:	f000 f868 	bl	800429c <_read_r>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	bfab      	itete	ge
 80041d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041d2:	89a3      	ldrhlt	r3, [r4, #12]
 80041d4:	181b      	addge	r3, r3, r0
 80041d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041da:	bfac      	ite	ge
 80041dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80041de:	81a3      	strhlt	r3, [r4, #12]
 80041e0:	bd10      	pop	{r4, pc}

080041e2 <__swrite>:
 80041e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e6:	461f      	mov	r7, r3
 80041e8:	898b      	ldrh	r3, [r1, #12]
 80041ea:	05db      	lsls	r3, r3, #23
 80041ec:	4605      	mov	r5, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	4616      	mov	r6, r2
 80041f2:	d505      	bpl.n	8004200 <__swrite+0x1e>
 80041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f8:	2302      	movs	r3, #2
 80041fa:	2200      	movs	r2, #0
 80041fc:	f000 f83c 	bl	8004278 <_lseek_r>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	4632      	mov	r2, r6
 800420e:	463b      	mov	r3, r7
 8004210:	4628      	mov	r0, r5
 8004212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004216:	f000 b853 	b.w	80042c0 <_write_r>

0800421a <__sseek>:
 800421a:	b510      	push	{r4, lr}
 800421c:	460c      	mov	r4, r1
 800421e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004222:	f000 f829 	bl	8004278 <_lseek_r>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	bf15      	itete	ne
 800422c:	6560      	strne	r0, [r4, #84]	; 0x54
 800422e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004236:	81a3      	strheq	r3, [r4, #12]
 8004238:	bf18      	it	ne
 800423a:	81a3      	strhne	r3, [r4, #12]
 800423c:	bd10      	pop	{r4, pc}

0800423e <__sclose>:
 800423e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004242:	f000 b809 	b.w	8004258 <_close_r>

08004246 <memset>:
 8004246:	4402      	add	r2, r0
 8004248:	4603      	mov	r3, r0
 800424a:	4293      	cmp	r3, r2
 800424c:	d100      	bne.n	8004250 <memset+0xa>
 800424e:	4770      	bx	lr
 8004250:	f803 1b01 	strb.w	r1, [r3], #1
 8004254:	e7f9      	b.n	800424a <memset+0x4>
	...

08004258 <_close_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d06      	ldr	r5, [pc, #24]	; (8004274 <_close_r+0x1c>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fc fb42 	bl	80008ec <_close>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_close_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_close_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20000fb4 	.word	0x20000fb4

08004278 <_lseek_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4d07      	ldr	r5, [pc, #28]	; (8004298 <_lseek_r+0x20>)
 800427c:	4604      	mov	r4, r0
 800427e:	4608      	mov	r0, r1
 8004280:	4611      	mov	r1, r2
 8004282:	2200      	movs	r2, #0
 8004284:	602a      	str	r2, [r5, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	f7fc fb57 	bl	800093a <_lseek>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_lseek_r+0x1e>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_lseek_r+0x1e>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000fb4 	.word	0x20000fb4

0800429c <_read_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4d07      	ldr	r5, [pc, #28]	; (80042bc <_read_r+0x20>)
 80042a0:	4604      	mov	r4, r0
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7fc fae5 	bl	800087a <_read>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_read_r+0x1e>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_read_r+0x1e>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	20000fb4 	.word	0x20000fb4

080042c0 <_write_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d07      	ldr	r5, [pc, #28]	; (80042e0 <_write_r+0x20>)
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	2200      	movs	r2, #0
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc faf0 	bl	80008b4 <_write>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_write_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_write_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000fb4 	.word	0x20000fb4

080042e4 <__errno>:
 80042e4:	4b01      	ldr	r3, [pc, #4]	; (80042ec <__errno+0x8>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000068 	.word	0x20000068

080042f0 <__libc_init_array>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4d0d      	ldr	r5, [pc, #52]	; (8004328 <__libc_init_array+0x38>)
 80042f4:	4c0d      	ldr	r4, [pc, #52]	; (800432c <__libc_init_array+0x3c>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	2600      	movs	r6, #0
 80042fc:	42a6      	cmp	r6, r4
 80042fe:	d109      	bne.n	8004314 <__libc_init_array+0x24>
 8004300:	4d0b      	ldr	r5, [pc, #44]	; (8004330 <__libc_init_array+0x40>)
 8004302:	4c0c      	ldr	r4, [pc, #48]	; (8004334 <__libc_init_array+0x44>)
 8004304:	f000 fdbe 	bl	8004e84 <_init>
 8004308:	1b64      	subs	r4, r4, r5
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	2600      	movs	r6, #0
 800430e:	42a6      	cmp	r6, r4
 8004310:	d105      	bne.n	800431e <__libc_init_array+0x2e>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	f855 3b04 	ldr.w	r3, [r5], #4
 8004318:	4798      	blx	r3
 800431a:	3601      	adds	r6, #1
 800431c:	e7ee      	b.n	80042fc <__libc_init_array+0xc>
 800431e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004322:	4798      	blx	r3
 8004324:	3601      	adds	r6, #1
 8004326:	e7f2      	b.n	800430e <__libc_init_array+0x1e>
 8004328:	08004f64 	.word	0x08004f64
 800432c:	08004f64 	.word	0x08004f64
 8004330:	08004f64 	.word	0x08004f64
 8004334:	08004f68 	.word	0x08004f68

08004338 <__retarget_lock_acquire_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_release_recursive>:
 800433a:	4770      	bx	lr

0800433c <_free_r>:
 800433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800433e:	2900      	cmp	r1, #0
 8004340:	d044      	beq.n	80043cc <_free_r+0x90>
 8004342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004346:	9001      	str	r0, [sp, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f1a1 0404 	sub.w	r4, r1, #4
 800434e:	bfb8      	it	lt
 8004350:	18e4      	addlt	r4, r4, r3
 8004352:	f000 f8df 	bl	8004514 <__malloc_lock>
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <_free_r+0x94>)
 8004358:	9801      	ldr	r0, [sp, #4]
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	b933      	cbnz	r3, 800436c <_free_r+0x30>
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6014      	str	r4, [r2, #0]
 8004362:	b003      	add	sp, #12
 8004364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004368:	f000 b8da 	b.w	8004520 <__malloc_unlock>
 800436c:	42a3      	cmp	r3, r4
 800436e:	d908      	bls.n	8004382 <_free_r+0x46>
 8004370:	6825      	ldr	r5, [r4, #0]
 8004372:	1961      	adds	r1, r4, r5
 8004374:	428b      	cmp	r3, r1
 8004376:	bf01      	itttt	eq
 8004378:	6819      	ldreq	r1, [r3, #0]
 800437a:	685b      	ldreq	r3, [r3, #4]
 800437c:	1949      	addeq	r1, r1, r5
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	e7ed      	b.n	800435e <_free_r+0x22>
 8004382:	461a      	mov	r2, r3
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b10b      	cbz	r3, 800438c <_free_r+0x50>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d9fa      	bls.n	8004382 <_free_r+0x46>
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	1855      	adds	r5, r2, r1
 8004390:	42a5      	cmp	r5, r4
 8004392:	d10b      	bne.n	80043ac <_free_r+0x70>
 8004394:	6824      	ldr	r4, [r4, #0]
 8004396:	4421      	add	r1, r4
 8004398:	1854      	adds	r4, r2, r1
 800439a:	42a3      	cmp	r3, r4
 800439c:	6011      	str	r1, [r2, #0]
 800439e:	d1e0      	bne.n	8004362 <_free_r+0x26>
 80043a0:	681c      	ldr	r4, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6053      	str	r3, [r2, #4]
 80043a6:	440c      	add	r4, r1
 80043a8:	6014      	str	r4, [r2, #0]
 80043aa:	e7da      	b.n	8004362 <_free_r+0x26>
 80043ac:	d902      	bls.n	80043b4 <_free_r+0x78>
 80043ae:	230c      	movs	r3, #12
 80043b0:	6003      	str	r3, [r0, #0]
 80043b2:	e7d6      	b.n	8004362 <_free_r+0x26>
 80043b4:	6825      	ldr	r5, [r4, #0]
 80043b6:	1961      	adds	r1, r4, r5
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf04      	itt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	bf04      	itt	eq
 80043c4:	1949      	addeq	r1, r1, r5
 80043c6:	6021      	streq	r1, [r4, #0]
 80043c8:	6054      	str	r4, [r2, #4]
 80043ca:	e7ca      	b.n	8004362 <_free_r+0x26>
 80043cc:	b003      	add	sp, #12
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	20000fbc 	.word	0x20000fbc

080043d4 <sbrk_aligned>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4e0e      	ldr	r6, [pc, #56]	; (8004410 <sbrk_aligned+0x3c>)
 80043d8:	460c      	mov	r4, r1
 80043da:	6831      	ldr	r1, [r6, #0]
 80043dc:	4605      	mov	r5, r0
 80043de:	b911      	cbnz	r1, 80043e6 <sbrk_aligned+0x12>
 80043e0:	f000 fcbc 	bl	8004d5c <_sbrk_r>
 80043e4:	6030      	str	r0, [r6, #0]
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 fcb7 	bl	8004d5c <_sbrk_r>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	d00a      	beq.n	8004408 <sbrk_aligned+0x34>
 80043f2:	1cc4      	adds	r4, r0, #3
 80043f4:	f024 0403 	bic.w	r4, r4, #3
 80043f8:	42a0      	cmp	r0, r4
 80043fa:	d007      	beq.n	800440c <sbrk_aligned+0x38>
 80043fc:	1a21      	subs	r1, r4, r0
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 fcac 	bl	8004d5c <_sbrk_r>
 8004404:	3001      	adds	r0, #1
 8004406:	d101      	bne.n	800440c <sbrk_aligned+0x38>
 8004408:	f04f 34ff 	mov.w	r4, #4294967295
 800440c:	4620      	mov	r0, r4
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	20000fc0 	.word	0x20000fc0

08004414 <_malloc_r>:
 8004414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004418:	1ccd      	adds	r5, r1, #3
 800441a:	f025 0503 	bic.w	r5, r5, #3
 800441e:	3508      	adds	r5, #8
 8004420:	2d0c      	cmp	r5, #12
 8004422:	bf38      	it	cc
 8004424:	250c      	movcc	r5, #12
 8004426:	2d00      	cmp	r5, #0
 8004428:	4607      	mov	r7, r0
 800442a:	db01      	blt.n	8004430 <_malloc_r+0x1c>
 800442c:	42a9      	cmp	r1, r5
 800442e:	d905      	bls.n	800443c <_malloc_r+0x28>
 8004430:	230c      	movs	r3, #12
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	2600      	movs	r6, #0
 8004436:	4630      	mov	r0, r6
 8004438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004510 <_malloc_r+0xfc>
 8004440:	f000 f868 	bl	8004514 <__malloc_lock>
 8004444:	f8d8 3000 	ldr.w	r3, [r8]
 8004448:	461c      	mov	r4, r3
 800444a:	bb5c      	cbnz	r4, 80044a4 <_malloc_r+0x90>
 800444c:	4629      	mov	r1, r5
 800444e:	4638      	mov	r0, r7
 8004450:	f7ff ffc0 	bl	80043d4 <sbrk_aligned>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	4604      	mov	r4, r0
 8004458:	d155      	bne.n	8004506 <_malloc_r+0xf2>
 800445a:	f8d8 4000 	ldr.w	r4, [r8]
 800445e:	4626      	mov	r6, r4
 8004460:	2e00      	cmp	r6, #0
 8004462:	d145      	bne.n	80044f0 <_malloc_r+0xdc>
 8004464:	2c00      	cmp	r4, #0
 8004466:	d048      	beq.n	80044fa <_malloc_r+0xe6>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	4631      	mov	r1, r6
 800446c:	4638      	mov	r0, r7
 800446e:	eb04 0903 	add.w	r9, r4, r3
 8004472:	f000 fc73 	bl	8004d5c <_sbrk_r>
 8004476:	4581      	cmp	r9, r0
 8004478:	d13f      	bne.n	80044fa <_malloc_r+0xe6>
 800447a:	6821      	ldr	r1, [r4, #0]
 800447c:	1a6d      	subs	r5, r5, r1
 800447e:	4629      	mov	r1, r5
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff ffa7 	bl	80043d4 <sbrk_aligned>
 8004486:	3001      	adds	r0, #1
 8004488:	d037      	beq.n	80044fa <_malloc_r+0xe6>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	442b      	add	r3, r5
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	f8d8 3000 	ldr.w	r3, [r8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d038      	beq.n	800450a <_malloc_r+0xf6>
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	42a2      	cmp	r2, r4
 800449c:	d12b      	bne.n	80044f6 <_malloc_r+0xe2>
 800449e:	2200      	movs	r2, #0
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e00f      	b.n	80044c4 <_malloc_r+0xb0>
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	1b52      	subs	r2, r2, r5
 80044a8:	d41f      	bmi.n	80044ea <_malloc_r+0xd6>
 80044aa:	2a0b      	cmp	r2, #11
 80044ac:	d917      	bls.n	80044de <_malloc_r+0xca>
 80044ae:	1961      	adds	r1, r4, r5
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	6025      	str	r5, [r4, #0]
 80044b4:	bf18      	it	ne
 80044b6:	6059      	strne	r1, [r3, #4]
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	bf08      	it	eq
 80044bc:	f8c8 1000 	streq.w	r1, [r8]
 80044c0:	5162      	str	r2, [r4, r5]
 80044c2:	604b      	str	r3, [r1, #4]
 80044c4:	4638      	mov	r0, r7
 80044c6:	f104 060b 	add.w	r6, r4, #11
 80044ca:	f000 f829 	bl	8004520 <__malloc_unlock>
 80044ce:	f026 0607 	bic.w	r6, r6, #7
 80044d2:	1d23      	adds	r3, r4, #4
 80044d4:	1af2      	subs	r2, r6, r3
 80044d6:	d0ae      	beq.n	8004436 <_malloc_r+0x22>
 80044d8:	1b9b      	subs	r3, r3, r6
 80044da:	50a3      	str	r3, [r4, r2]
 80044dc:	e7ab      	b.n	8004436 <_malloc_r+0x22>
 80044de:	42a3      	cmp	r3, r4
 80044e0:	6862      	ldr	r2, [r4, #4]
 80044e2:	d1dd      	bne.n	80044a0 <_malloc_r+0x8c>
 80044e4:	f8c8 2000 	str.w	r2, [r8]
 80044e8:	e7ec      	b.n	80044c4 <_malloc_r+0xb0>
 80044ea:	4623      	mov	r3, r4
 80044ec:	6864      	ldr	r4, [r4, #4]
 80044ee:	e7ac      	b.n	800444a <_malloc_r+0x36>
 80044f0:	4634      	mov	r4, r6
 80044f2:	6876      	ldr	r6, [r6, #4]
 80044f4:	e7b4      	b.n	8004460 <_malloc_r+0x4c>
 80044f6:	4613      	mov	r3, r2
 80044f8:	e7cc      	b.n	8004494 <_malloc_r+0x80>
 80044fa:	230c      	movs	r3, #12
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4638      	mov	r0, r7
 8004500:	f000 f80e 	bl	8004520 <__malloc_unlock>
 8004504:	e797      	b.n	8004436 <_malloc_r+0x22>
 8004506:	6025      	str	r5, [r4, #0]
 8004508:	e7dc      	b.n	80044c4 <_malloc_r+0xb0>
 800450a:	605b      	str	r3, [r3, #4]
 800450c:	deff      	udf	#255	; 0xff
 800450e:	bf00      	nop
 8004510:	20000fbc 	.word	0x20000fbc

08004514 <__malloc_lock>:
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <__malloc_lock+0x8>)
 8004516:	f7ff bf0f 	b.w	8004338 <__retarget_lock_acquire_recursive>
 800451a:	bf00      	nop
 800451c:	20000fb8 	.word	0x20000fb8

08004520 <__malloc_unlock>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__malloc_unlock+0x8>)
 8004522:	f7ff bf0a 	b.w	800433a <__retarget_lock_release_recursive>
 8004526:	bf00      	nop
 8004528:	20000fb8 	.word	0x20000fb8

0800452c <__sfputc_r>:
 800452c:	6893      	ldr	r3, [r2, #8]
 800452e:	3b01      	subs	r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	b410      	push	{r4}
 8004534:	6093      	str	r3, [r2, #8]
 8004536:	da08      	bge.n	800454a <__sfputc_r+0x1e>
 8004538:	6994      	ldr	r4, [r2, #24]
 800453a:	42a3      	cmp	r3, r4
 800453c:	db01      	blt.n	8004542 <__sfputc_r+0x16>
 800453e:	290a      	cmp	r1, #10
 8004540:	d103      	bne.n	800454a <__sfputc_r+0x1e>
 8004542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004546:	f000 bb73 	b.w	8004c30 <__swbuf_r>
 800454a:	6813      	ldr	r3, [r2, #0]
 800454c:	1c58      	adds	r0, r3, #1
 800454e:	6010      	str	r0, [r2, #0]
 8004550:	7019      	strb	r1, [r3, #0]
 8004552:	4608      	mov	r0, r1
 8004554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004558:	4770      	bx	lr

0800455a <__sfputs_r>:
 800455a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455c:	4606      	mov	r6, r0
 800455e:	460f      	mov	r7, r1
 8004560:	4614      	mov	r4, r2
 8004562:	18d5      	adds	r5, r2, r3
 8004564:	42ac      	cmp	r4, r5
 8004566:	d101      	bne.n	800456c <__sfputs_r+0x12>
 8004568:	2000      	movs	r0, #0
 800456a:	e007      	b.n	800457c <__sfputs_r+0x22>
 800456c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004570:	463a      	mov	r2, r7
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff ffda 	bl	800452c <__sfputc_r>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d1f3      	bne.n	8004564 <__sfputs_r+0xa>
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004580 <_vfiprintf_r>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	460d      	mov	r5, r1
 8004586:	b09d      	sub	sp, #116	; 0x74
 8004588:	4614      	mov	r4, r2
 800458a:	4698      	mov	r8, r3
 800458c:	4606      	mov	r6, r0
 800458e:	b118      	cbz	r0, 8004598 <_vfiprintf_r+0x18>
 8004590:	6a03      	ldr	r3, [r0, #32]
 8004592:	b90b      	cbnz	r3, 8004598 <_vfiprintf_r+0x18>
 8004594:	f7ff fdcc 	bl	8004130 <__sinit>
 8004598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800459a:	07d9      	lsls	r1, r3, #31
 800459c:	d405      	bmi.n	80045aa <_vfiprintf_r+0x2a>
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	059a      	lsls	r2, r3, #22
 80045a2:	d402      	bmi.n	80045aa <_vfiprintf_r+0x2a>
 80045a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045a6:	f7ff fec7 	bl	8004338 <__retarget_lock_acquire_recursive>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	071b      	lsls	r3, r3, #28
 80045ae:	d501      	bpl.n	80045b4 <_vfiprintf_r+0x34>
 80045b0:	692b      	ldr	r3, [r5, #16]
 80045b2:	b99b      	cbnz	r3, 80045dc <_vfiprintf_r+0x5c>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 fb78 	bl	8004cac <__swsetup_r>
 80045bc:	b170      	cbz	r0, 80045dc <_vfiprintf_r+0x5c>
 80045be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045c0:	07dc      	lsls	r4, r3, #31
 80045c2:	d504      	bpl.n	80045ce <_vfiprintf_r+0x4e>
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	b01d      	add	sp, #116	; 0x74
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	0598      	lsls	r0, r3, #22
 80045d2:	d4f7      	bmi.n	80045c4 <_vfiprintf_r+0x44>
 80045d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045d6:	f7ff feb0 	bl	800433a <__retarget_lock_release_recursive>
 80045da:	e7f3      	b.n	80045c4 <_vfiprintf_r+0x44>
 80045dc:	2300      	movs	r3, #0
 80045de:	9309      	str	r3, [sp, #36]	; 0x24
 80045e0:	2320      	movs	r3, #32
 80045e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ea:	2330      	movs	r3, #48	; 0x30
 80045ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80047a0 <_vfiprintf_r+0x220>
 80045f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045f4:	f04f 0901 	mov.w	r9, #1
 80045f8:	4623      	mov	r3, r4
 80045fa:	469a      	mov	sl, r3
 80045fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004600:	b10a      	cbz	r2, 8004606 <_vfiprintf_r+0x86>
 8004602:	2a25      	cmp	r2, #37	; 0x25
 8004604:	d1f9      	bne.n	80045fa <_vfiprintf_r+0x7a>
 8004606:	ebba 0b04 	subs.w	fp, sl, r4
 800460a:	d00b      	beq.n	8004624 <_vfiprintf_r+0xa4>
 800460c:	465b      	mov	r3, fp
 800460e:	4622      	mov	r2, r4
 8004610:	4629      	mov	r1, r5
 8004612:	4630      	mov	r0, r6
 8004614:	f7ff ffa1 	bl	800455a <__sfputs_r>
 8004618:	3001      	adds	r0, #1
 800461a:	f000 80a9 	beq.w	8004770 <_vfiprintf_r+0x1f0>
 800461e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004620:	445a      	add	r2, fp
 8004622:	9209      	str	r2, [sp, #36]	; 0x24
 8004624:	f89a 3000 	ldrb.w	r3, [sl]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a1 	beq.w	8004770 <_vfiprintf_r+0x1f0>
 800462e:	2300      	movs	r3, #0
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004638:	f10a 0a01 	add.w	sl, sl, #1
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	9307      	str	r3, [sp, #28]
 8004640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004644:	931a      	str	r3, [sp, #104]	; 0x68
 8004646:	4654      	mov	r4, sl
 8004648:	2205      	movs	r2, #5
 800464a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464e:	4854      	ldr	r0, [pc, #336]	; (80047a0 <_vfiprintf_r+0x220>)
 8004650:	f7fb fde6 	bl	8000220 <memchr>
 8004654:	9a04      	ldr	r2, [sp, #16]
 8004656:	b9d8      	cbnz	r0, 8004690 <_vfiprintf_r+0x110>
 8004658:	06d1      	lsls	r1, r2, #27
 800465a:	bf44      	itt	mi
 800465c:	2320      	movmi	r3, #32
 800465e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004662:	0713      	lsls	r3, r2, #28
 8004664:	bf44      	itt	mi
 8004666:	232b      	movmi	r3, #43	; 0x2b
 8004668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800466c:	f89a 3000 	ldrb.w	r3, [sl]
 8004670:	2b2a      	cmp	r3, #42	; 0x2a
 8004672:	d015      	beq.n	80046a0 <_vfiprintf_r+0x120>
 8004674:	9a07      	ldr	r2, [sp, #28]
 8004676:	4654      	mov	r4, sl
 8004678:	2000      	movs	r0, #0
 800467a:	f04f 0c0a 	mov.w	ip, #10
 800467e:	4621      	mov	r1, r4
 8004680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004684:	3b30      	subs	r3, #48	; 0x30
 8004686:	2b09      	cmp	r3, #9
 8004688:	d94d      	bls.n	8004726 <_vfiprintf_r+0x1a6>
 800468a:	b1b0      	cbz	r0, 80046ba <_vfiprintf_r+0x13a>
 800468c:	9207      	str	r2, [sp, #28]
 800468e:	e014      	b.n	80046ba <_vfiprintf_r+0x13a>
 8004690:	eba0 0308 	sub.w	r3, r0, r8
 8004694:	fa09 f303 	lsl.w	r3, r9, r3
 8004698:	4313      	orrs	r3, r2
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	46a2      	mov	sl, r4
 800469e:	e7d2      	b.n	8004646 <_vfiprintf_r+0xc6>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	1d19      	adds	r1, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	9103      	str	r1, [sp, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bfbb      	ittet	lt
 80046ac:	425b      	neglt	r3, r3
 80046ae:	f042 0202 	orrlt.w	r2, r2, #2
 80046b2:	9307      	strge	r3, [sp, #28]
 80046b4:	9307      	strlt	r3, [sp, #28]
 80046b6:	bfb8      	it	lt
 80046b8:	9204      	strlt	r2, [sp, #16]
 80046ba:	7823      	ldrb	r3, [r4, #0]
 80046bc:	2b2e      	cmp	r3, #46	; 0x2e
 80046be:	d10c      	bne.n	80046da <_vfiprintf_r+0x15a>
 80046c0:	7863      	ldrb	r3, [r4, #1]
 80046c2:	2b2a      	cmp	r3, #42	; 0x2a
 80046c4:	d134      	bne.n	8004730 <_vfiprintf_r+0x1b0>
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	1d1a      	adds	r2, r3, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	9203      	str	r2, [sp, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfb8      	it	lt
 80046d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046d6:	3402      	adds	r4, #2
 80046d8:	9305      	str	r3, [sp, #20]
 80046da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80047b0 <_vfiprintf_r+0x230>
 80046de:	7821      	ldrb	r1, [r4, #0]
 80046e0:	2203      	movs	r2, #3
 80046e2:	4650      	mov	r0, sl
 80046e4:	f7fb fd9c 	bl	8000220 <memchr>
 80046e8:	b138      	cbz	r0, 80046fa <_vfiprintf_r+0x17a>
 80046ea:	9b04      	ldr	r3, [sp, #16]
 80046ec:	eba0 000a 	sub.w	r0, r0, sl
 80046f0:	2240      	movs	r2, #64	; 0x40
 80046f2:	4082      	lsls	r2, r0
 80046f4:	4313      	orrs	r3, r2
 80046f6:	3401      	adds	r4, #1
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fe:	4829      	ldr	r0, [pc, #164]	; (80047a4 <_vfiprintf_r+0x224>)
 8004700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004704:	2206      	movs	r2, #6
 8004706:	f7fb fd8b 	bl	8000220 <memchr>
 800470a:	2800      	cmp	r0, #0
 800470c:	d03f      	beq.n	800478e <_vfiprintf_r+0x20e>
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <_vfiprintf_r+0x228>)
 8004710:	bb1b      	cbnz	r3, 800475a <_vfiprintf_r+0x1da>
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	3307      	adds	r3, #7
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	3308      	adds	r3, #8
 800471c:	9303      	str	r3, [sp, #12]
 800471e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004720:	443b      	add	r3, r7
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
 8004724:	e768      	b.n	80045f8 <_vfiprintf_r+0x78>
 8004726:	fb0c 3202 	mla	r2, ip, r2, r3
 800472a:	460c      	mov	r4, r1
 800472c:	2001      	movs	r0, #1
 800472e:	e7a6      	b.n	800467e <_vfiprintf_r+0xfe>
 8004730:	2300      	movs	r3, #0
 8004732:	3401      	adds	r4, #1
 8004734:	9305      	str	r3, [sp, #20]
 8004736:	4619      	mov	r1, r3
 8004738:	f04f 0c0a 	mov.w	ip, #10
 800473c:	4620      	mov	r0, r4
 800473e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004742:	3a30      	subs	r2, #48	; 0x30
 8004744:	2a09      	cmp	r2, #9
 8004746:	d903      	bls.n	8004750 <_vfiprintf_r+0x1d0>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0c6      	beq.n	80046da <_vfiprintf_r+0x15a>
 800474c:	9105      	str	r1, [sp, #20]
 800474e:	e7c4      	b.n	80046da <_vfiprintf_r+0x15a>
 8004750:	fb0c 2101 	mla	r1, ip, r1, r2
 8004754:	4604      	mov	r4, r0
 8004756:	2301      	movs	r3, #1
 8004758:	e7f0      	b.n	800473c <_vfiprintf_r+0x1bc>
 800475a:	ab03      	add	r3, sp, #12
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	462a      	mov	r2, r5
 8004760:	4b12      	ldr	r3, [pc, #72]	; (80047ac <_vfiprintf_r+0x22c>)
 8004762:	a904      	add	r1, sp, #16
 8004764:	4630      	mov	r0, r6
 8004766:	f3af 8000 	nop.w
 800476a:	4607      	mov	r7, r0
 800476c:	1c78      	adds	r0, r7, #1
 800476e:	d1d6      	bne.n	800471e <_vfiprintf_r+0x19e>
 8004770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004772:	07d9      	lsls	r1, r3, #31
 8004774:	d405      	bmi.n	8004782 <_vfiprintf_r+0x202>
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	059a      	lsls	r2, r3, #22
 800477a:	d402      	bmi.n	8004782 <_vfiprintf_r+0x202>
 800477c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800477e:	f7ff fddc 	bl	800433a <__retarget_lock_release_recursive>
 8004782:	89ab      	ldrh	r3, [r5, #12]
 8004784:	065b      	lsls	r3, r3, #25
 8004786:	f53f af1d 	bmi.w	80045c4 <_vfiprintf_r+0x44>
 800478a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800478c:	e71c      	b.n	80045c8 <_vfiprintf_r+0x48>
 800478e:	ab03      	add	r3, sp, #12
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	462a      	mov	r2, r5
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_vfiprintf_r+0x22c>)
 8004796:	a904      	add	r1, sp, #16
 8004798:	4630      	mov	r0, r6
 800479a:	f000 f879 	bl	8004890 <_printf_i>
 800479e:	e7e4      	b.n	800476a <_vfiprintf_r+0x1ea>
 80047a0:	08004f28 	.word	0x08004f28
 80047a4:	08004f32 	.word	0x08004f32
 80047a8:	00000000 	.word	0x00000000
 80047ac:	0800455b 	.word	0x0800455b
 80047b0:	08004f2e 	.word	0x08004f2e

080047b4 <_printf_common>:
 80047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	4616      	mov	r6, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	688a      	ldr	r2, [r1, #8]
 80047be:	690b      	ldr	r3, [r1, #16]
 80047c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bfb8      	it	lt
 80047c8:	4613      	movlt	r3, r2
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047d0:	4607      	mov	r7, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	b10a      	cbz	r2, 80047da <_printf_common+0x26>
 80047d6:	3301      	adds	r3, #1
 80047d8:	6033      	str	r3, [r6, #0]
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	0699      	lsls	r1, r3, #26
 80047de:	bf42      	ittt	mi
 80047e0:	6833      	ldrmi	r3, [r6, #0]
 80047e2:	3302      	addmi	r3, #2
 80047e4:	6033      	strmi	r3, [r6, #0]
 80047e6:	6825      	ldr	r5, [r4, #0]
 80047e8:	f015 0506 	ands.w	r5, r5, #6
 80047ec:	d106      	bne.n	80047fc <_printf_common+0x48>
 80047ee:	f104 0a19 	add.w	sl, r4, #25
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	6832      	ldr	r2, [r6, #0]
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	42ab      	cmp	r3, r5
 80047fa:	dc26      	bgt.n	800484a <_printf_common+0x96>
 80047fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004800:	1e13      	subs	r3, r2, #0
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	bf18      	it	ne
 8004806:	2301      	movne	r3, #1
 8004808:	0692      	lsls	r2, r2, #26
 800480a:	d42b      	bmi.n	8004864 <_printf_common+0xb0>
 800480c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004810:	4649      	mov	r1, r9
 8004812:	4638      	mov	r0, r7
 8004814:	47c0      	blx	r8
 8004816:	3001      	adds	r0, #1
 8004818:	d01e      	beq.n	8004858 <_printf_common+0xa4>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	6922      	ldr	r2, [r4, #16]
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	2b04      	cmp	r3, #4
 8004824:	bf02      	ittt	eq
 8004826:	68e5      	ldreq	r5, [r4, #12]
 8004828:	6833      	ldreq	r3, [r6, #0]
 800482a:	1aed      	subeq	r5, r5, r3
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	bf0c      	ite	eq
 8004830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004834:	2500      	movne	r5, #0
 8004836:	4293      	cmp	r3, r2
 8004838:	bfc4      	itt	gt
 800483a:	1a9b      	subgt	r3, r3, r2
 800483c:	18ed      	addgt	r5, r5, r3
 800483e:	2600      	movs	r6, #0
 8004840:	341a      	adds	r4, #26
 8004842:	42b5      	cmp	r5, r6
 8004844:	d11a      	bne.n	800487c <_printf_common+0xc8>
 8004846:	2000      	movs	r0, #0
 8004848:	e008      	b.n	800485c <_printf_common+0xa8>
 800484a:	2301      	movs	r3, #1
 800484c:	4652      	mov	r2, sl
 800484e:	4649      	mov	r1, r9
 8004850:	4638      	mov	r0, r7
 8004852:	47c0      	blx	r8
 8004854:	3001      	adds	r0, #1
 8004856:	d103      	bne.n	8004860 <_printf_common+0xac>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004860:	3501      	adds	r5, #1
 8004862:	e7c6      	b.n	80047f2 <_printf_common+0x3e>
 8004864:	18e1      	adds	r1, r4, r3
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	2030      	movs	r0, #48	; 0x30
 800486a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800486e:	4422      	add	r2, r4
 8004870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004878:	3302      	adds	r3, #2
 800487a:	e7c7      	b.n	800480c <_printf_common+0x58>
 800487c:	2301      	movs	r3, #1
 800487e:	4622      	mov	r2, r4
 8004880:	4649      	mov	r1, r9
 8004882:	4638      	mov	r0, r7
 8004884:	47c0      	blx	r8
 8004886:	3001      	adds	r0, #1
 8004888:	d0e6      	beq.n	8004858 <_printf_common+0xa4>
 800488a:	3601      	adds	r6, #1
 800488c:	e7d9      	b.n	8004842 <_printf_common+0x8e>
	...

08004890 <_printf_i>:
 8004890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	7e0f      	ldrb	r7, [r1, #24]
 8004896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004898:	2f78      	cmp	r7, #120	; 0x78
 800489a:	4691      	mov	r9, r2
 800489c:	4680      	mov	r8, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	469a      	mov	sl, r3
 80048a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048a6:	d807      	bhi.n	80048b8 <_printf_i+0x28>
 80048a8:	2f62      	cmp	r7, #98	; 0x62
 80048aa:	d80a      	bhi.n	80048c2 <_printf_i+0x32>
 80048ac:	2f00      	cmp	r7, #0
 80048ae:	f000 80d4 	beq.w	8004a5a <_printf_i+0x1ca>
 80048b2:	2f58      	cmp	r7, #88	; 0x58
 80048b4:	f000 80c0 	beq.w	8004a38 <_printf_i+0x1a8>
 80048b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048c0:	e03a      	b.n	8004938 <_printf_i+0xa8>
 80048c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048c6:	2b15      	cmp	r3, #21
 80048c8:	d8f6      	bhi.n	80048b8 <_printf_i+0x28>
 80048ca:	a101      	add	r1, pc, #4	; (adr r1, 80048d0 <_printf_i+0x40>)
 80048cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048d0:	08004929 	.word	0x08004929
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	080048b9 	.word	0x080048b9
 80048dc:	080048b9 	.word	0x080048b9
 80048e0:	080048b9 	.word	0x080048b9
 80048e4:	080048b9 	.word	0x080048b9
 80048e8:	0800493d 	.word	0x0800493d
 80048ec:	080048b9 	.word	0x080048b9
 80048f0:	080048b9 	.word	0x080048b9
 80048f4:	080048b9 	.word	0x080048b9
 80048f8:	080048b9 	.word	0x080048b9
 80048fc:	08004a41 	.word	0x08004a41
 8004900:	08004969 	.word	0x08004969
 8004904:	080049fb 	.word	0x080049fb
 8004908:	080048b9 	.word	0x080048b9
 800490c:	080048b9 	.word	0x080048b9
 8004910:	08004a63 	.word	0x08004a63
 8004914:	080048b9 	.word	0x080048b9
 8004918:	08004969 	.word	0x08004969
 800491c:	080048b9 	.word	0x080048b9
 8004920:	080048b9 	.word	0x080048b9
 8004924:	08004a03 	.word	0x08004a03
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	1d1a      	adds	r2, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	602a      	str	r2, [r5, #0]
 8004930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004938:	2301      	movs	r3, #1
 800493a:	e09f      	b.n	8004a7c <_printf_i+0x1ec>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	0607      	lsls	r7, r0, #24
 8004942:	f103 0104 	add.w	r1, r3, #4
 8004946:	6029      	str	r1, [r5, #0]
 8004948:	d501      	bpl.n	800494e <_printf_i+0xbe>
 800494a:	681e      	ldr	r6, [r3, #0]
 800494c:	e003      	b.n	8004956 <_printf_i+0xc6>
 800494e:	0646      	lsls	r6, r0, #25
 8004950:	d5fb      	bpl.n	800494a <_printf_i+0xba>
 8004952:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004956:	2e00      	cmp	r6, #0
 8004958:	da03      	bge.n	8004962 <_printf_i+0xd2>
 800495a:	232d      	movs	r3, #45	; 0x2d
 800495c:	4276      	negs	r6, r6
 800495e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004962:	485a      	ldr	r0, [pc, #360]	; (8004acc <_printf_i+0x23c>)
 8004964:	230a      	movs	r3, #10
 8004966:	e012      	b.n	800498e <_printf_i+0xfe>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	1d19      	adds	r1, r3, #4
 800496e:	6029      	str	r1, [r5, #0]
 8004970:	0605      	lsls	r5, r0, #24
 8004972:	d501      	bpl.n	8004978 <_printf_i+0xe8>
 8004974:	681e      	ldr	r6, [r3, #0]
 8004976:	e002      	b.n	800497e <_printf_i+0xee>
 8004978:	0641      	lsls	r1, r0, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0xe4>
 800497c:	881e      	ldrh	r6, [r3, #0]
 800497e:	4853      	ldr	r0, [pc, #332]	; (8004acc <_printf_i+0x23c>)
 8004980:	2f6f      	cmp	r7, #111	; 0x6f
 8004982:	bf0c      	ite	eq
 8004984:	2308      	moveq	r3, #8
 8004986:	230a      	movne	r3, #10
 8004988:	2100      	movs	r1, #0
 800498a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800498e:	6865      	ldr	r5, [r4, #4]
 8004990:	60a5      	str	r5, [r4, #8]
 8004992:	2d00      	cmp	r5, #0
 8004994:	bfa2      	ittt	ge
 8004996:	6821      	ldrge	r1, [r4, #0]
 8004998:	f021 0104 	bicge.w	r1, r1, #4
 800499c:	6021      	strge	r1, [r4, #0]
 800499e:	b90e      	cbnz	r6, 80049a4 <_printf_i+0x114>
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	d04b      	beq.n	8004a3c <_printf_i+0x1ac>
 80049a4:	4615      	mov	r5, r2
 80049a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049aa:	fb03 6711 	mls	r7, r3, r1, r6
 80049ae:	5dc7      	ldrb	r7, [r0, r7]
 80049b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049b4:	4637      	mov	r7, r6
 80049b6:	42bb      	cmp	r3, r7
 80049b8:	460e      	mov	r6, r1
 80049ba:	d9f4      	bls.n	80049a6 <_printf_i+0x116>
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d10b      	bne.n	80049d8 <_printf_i+0x148>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	07de      	lsls	r6, r3, #31
 80049c4:	d508      	bpl.n	80049d8 <_printf_i+0x148>
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	6861      	ldr	r1, [r4, #4]
 80049ca:	4299      	cmp	r1, r3
 80049cc:	bfde      	ittt	le
 80049ce:	2330      	movle	r3, #48	; 0x30
 80049d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d8:	1b52      	subs	r2, r2, r5
 80049da:	6122      	str	r2, [r4, #16]
 80049dc:	f8cd a000 	str.w	sl, [sp]
 80049e0:	464b      	mov	r3, r9
 80049e2:	aa03      	add	r2, sp, #12
 80049e4:	4621      	mov	r1, r4
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff fee4 	bl	80047b4 <_printf_common>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d14a      	bne.n	8004a86 <_printf_i+0x1f6>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	b004      	add	sp, #16
 80049f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	f043 0320 	orr.w	r3, r3, #32
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	4833      	ldr	r0, [pc, #204]	; (8004ad0 <_printf_i+0x240>)
 8004a04:	2778      	movs	r7, #120	; 0x78
 8004a06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	6829      	ldr	r1, [r5, #0]
 8004a0e:	061f      	lsls	r7, r3, #24
 8004a10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a14:	d402      	bmi.n	8004a1c <_printf_i+0x18c>
 8004a16:	065f      	lsls	r7, r3, #25
 8004a18:	bf48      	it	mi
 8004a1a:	b2b6      	uxthmi	r6, r6
 8004a1c:	07df      	lsls	r7, r3, #31
 8004a1e:	bf48      	it	mi
 8004a20:	f043 0320 	orrmi.w	r3, r3, #32
 8004a24:	6029      	str	r1, [r5, #0]
 8004a26:	bf48      	it	mi
 8004a28:	6023      	strmi	r3, [r4, #0]
 8004a2a:	b91e      	cbnz	r6, 8004a34 <_printf_i+0x1a4>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	f023 0320 	bic.w	r3, r3, #32
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	2310      	movs	r3, #16
 8004a36:	e7a7      	b.n	8004988 <_printf_i+0xf8>
 8004a38:	4824      	ldr	r0, [pc, #144]	; (8004acc <_printf_i+0x23c>)
 8004a3a:	e7e4      	b.n	8004a06 <_printf_i+0x176>
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	e7bd      	b.n	80049bc <_printf_i+0x12c>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	6826      	ldr	r6, [r4, #0]
 8004a44:	6961      	ldr	r1, [r4, #20]
 8004a46:	1d18      	adds	r0, r3, #4
 8004a48:	6028      	str	r0, [r5, #0]
 8004a4a:	0635      	lsls	r5, r6, #24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0x1c4>
 8004a50:	6019      	str	r1, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <_printf_i+0x1ca>
 8004a54:	0670      	lsls	r0, r6, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0x1c0>
 8004a58:	8019      	strh	r1, [r3, #0]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	4615      	mov	r5, r2
 8004a60:	e7bc      	b.n	80049dc <_printf_i+0x14c>
 8004a62:	682b      	ldr	r3, [r5, #0]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	602a      	str	r2, [r5, #0]
 8004a68:	681d      	ldr	r5, [r3, #0]
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7fb fbd6 	bl	8000220 <memchr>
 8004a74:	b108      	cbz	r0, 8004a7a <_printf_i+0x1ea>
 8004a76:	1b40      	subs	r0, r0, r5
 8004a78:	6060      	str	r0, [r4, #4]
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a84:	e7aa      	b.n	80049dc <_printf_i+0x14c>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	462a      	mov	r2, r5
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	47d0      	blx	sl
 8004a90:	3001      	adds	r0, #1
 8004a92:	d0ad      	beq.n	80049f0 <_printf_i+0x160>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	d413      	bmi.n	8004ac2 <_printf_i+0x232>
 8004a9a:	68e0      	ldr	r0, [r4, #12]
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	4298      	cmp	r0, r3
 8004aa0:	bfb8      	it	lt
 8004aa2:	4618      	movlt	r0, r3
 8004aa4:	e7a6      	b.n	80049f4 <_printf_i+0x164>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4649      	mov	r1, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	47d0      	blx	sl
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d09d      	beq.n	80049f0 <_printf_i+0x160>
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	68e3      	ldr	r3, [r4, #12]
 8004ab8:	9903      	ldr	r1, [sp, #12]
 8004aba:	1a5b      	subs	r3, r3, r1
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	dcf2      	bgt.n	8004aa6 <_printf_i+0x216>
 8004ac0:	e7eb      	b.n	8004a9a <_printf_i+0x20a>
 8004ac2:	2500      	movs	r5, #0
 8004ac4:	f104 0619 	add.w	r6, r4, #25
 8004ac8:	e7f5      	b.n	8004ab6 <_printf_i+0x226>
 8004aca:	bf00      	nop
 8004acc:	08004f39 	.word	0x08004f39
 8004ad0:	08004f4a 	.word	0x08004f4a

08004ad4 <__sflush_r>:
 8004ad4:	898a      	ldrh	r2, [r1, #12]
 8004ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ada:	4605      	mov	r5, r0
 8004adc:	0710      	lsls	r0, r2, #28
 8004ade:	460c      	mov	r4, r1
 8004ae0:	d458      	bmi.n	8004b94 <__sflush_r+0xc0>
 8004ae2:	684b      	ldr	r3, [r1, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	dc05      	bgt.n	8004af4 <__sflush_r+0x20>
 8004ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	dc02      	bgt.n	8004af4 <__sflush_r+0x20>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	d0f9      	beq.n	8004aee <__sflush_r+0x1a>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b00:	682f      	ldr	r7, [r5, #0]
 8004b02:	6a21      	ldr	r1, [r4, #32]
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	d032      	beq.n	8004b6e <__sflush_r+0x9a>
 8004b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	075a      	lsls	r2, r3, #29
 8004b0e:	d505      	bpl.n	8004b1c <__sflush_r+0x48>
 8004b10:	6863      	ldr	r3, [r4, #4]
 8004b12:	1ac0      	subs	r0, r0, r3
 8004b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b16:	b10b      	cbz	r3, 8004b1c <__sflush_r+0x48>
 8004b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b1a:	1ac0      	subs	r0, r0, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b22:	6a21      	ldr	r1, [r4, #32]
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b0      	blx	r6
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	d106      	bne.n	8004b3c <__sflush_r+0x68>
 8004b2e:	6829      	ldr	r1, [r5, #0]
 8004b30:	291d      	cmp	r1, #29
 8004b32:	d82b      	bhi.n	8004b8c <__sflush_r+0xb8>
 8004b34:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <__sflush_r+0x108>)
 8004b36:	410a      	asrs	r2, r1
 8004b38:	07d6      	lsls	r6, r2, #31
 8004b3a:	d427      	bmi.n	8004b8c <__sflush_r+0xb8>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	6062      	str	r2, [r4, #4]
 8004b40:	04d9      	lsls	r1, r3, #19
 8004b42:	6922      	ldr	r2, [r4, #16]
 8004b44:	6022      	str	r2, [r4, #0]
 8004b46:	d504      	bpl.n	8004b52 <__sflush_r+0x7e>
 8004b48:	1c42      	adds	r2, r0, #1
 8004b4a:	d101      	bne.n	8004b50 <__sflush_r+0x7c>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b903      	cbnz	r3, 8004b52 <__sflush_r+0x7e>
 8004b50:	6560      	str	r0, [r4, #84]	; 0x54
 8004b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b54:	602f      	str	r7, [r5, #0]
 8004b56:	2900      	cmp	r1, #0
 8004b58:	d0c9      	beq.n	8004aee <__sflush_r+0x1a>
 8004b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d002      	beq.n	8004b68 <__sflush_r+0x94>
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7ff fbea 	bl	800433c <_free_r>
 8004b68:	2000      	movs	r0, #0
 8004b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b6c:	e7c0      	b.n	8004af0 <__sflush_r+0x1c>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b0      	blx	r6
 8004b74:	1c41      	adds	r1, r0, #1
 8004b76:	d1c8      	bne.n	8004b0a <__sflush_r+0x36>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0c5      	beq.n	8004b0a <__sflush_r+0x36>
 8004b7e:	2b1d      	cmp	r3, #29
 8004b80:	d001      	beq.n	8004b86 <__sflush_r+0xb2>
 8004b82:	2b16      	cmp	r3, #22
 8004b84:	d101      	bne.n	8004b8a <__sflush_r+0xb6>
 8004b86:	602f      	str	r7, [r5, #0]
 8004b88:	e7b1      	b.n	8004aee <__sflush_r+0x1a>
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	e7ad      	b.n	8004af0 <__sflush_r+0x1c>
 8004b94:	690f      	ldr	r7, [r1, #16]
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	d0a9      	beq.n	8004aee <__sflush_r+0x1a>
 8004b9a:	0793      	lsls	r3, r2, #30
 8004b9c:	680e      	ldr	r6, [r1, #0]
 8004b9e:	bf08      	it	eq
 8004ba0:	694b      	ldreq	r3, [r1, #20]
 8004ba2:	600f      	str	r7, [r1, #0]
 8004ba4:	bf18      	it	ne
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	eba6 0807 	sub.w	r8, r6, r7
 8004bac:	608b      	str	r3, [r1, #8]
 8004bae:	f1b8 0f00 	cmp.w	r8, #0
 8004bb2:	dd9c      	ble.n	8004aee <__sflush_r+0x1a>
 8004bb4:	6a21      	ldr	r1, [r4, #32]
 8004bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bb8:	4643      	mov	r3, r8
 8004bba:	463a      	mov	r2, r7
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b0      	blx	r6
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	dc06      	bgt.n	8004bd2 <__sflush_r+0xfe>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	e78e      	b.n	8004af0 <__sflush_r+0x1c>
 8004bd2:	4407      	add	r7, r0
 8004bd4:	eba8 0800 	sub.w	r8, r8, r0
 8004bd8:	e7e9      	b.n	8004bae <__sflush_r+0xda>
 8004bda:	bf00      	nop
 8004bdc:	dfbffffe 	.word	0xdfbffffe

08004be0 <_fflush_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	690b      	ldr	r3, [r1, #16]
 8004be4:	4605      	mov	r5, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	b913      	cbnz	r3, 8004bf0 <_fflush_r+0x10>
 8004bea:	2500      	movs	r5, #0
 8004bec:	4628      	mov	r0, r5
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	b118      	cbz	r0, 8004bfa <_fflush_r+0x1a>
 8004bf2:	6a03      	ldr	r3, [r0, #32]
 8004bf4:	b90b      	cbnz	r3, 8004bfa <_fflush_r+0x1a>
 8004bf6:	f7ff fa9b 	bl	8004130 <__sinit>
 8004bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f3      	beq.n	8004bea <_fflush_r+0xa>
 8004c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c04:	07d0      	lsls	r0, r2, #31
 8004c06:	d404      	bmi.n	8004c12 <_fflush_r+0x32>
 8004c08:	0599      	lsls	r1, r3, #22
 8004c0a:	d402      	bmi.n	8004c12 <_fflush_r+0x32>
 8004c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0e:	f7ff fb93 	bl	8004338 <__retarget_lock_acquire_recursive>
 8004c12:	4628      	mov	r0, r5
 8004c14:	4621      	mov	r1, r4
 8004c16:	f7ff ff5d 	bl	8004ad4 <__sflush_r>
 8004c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c1c:	07da      	lsls	r2, r3, #31
 8004c1e:	4605      	mov	r5, r0
 8004c20:	d4e4      	bmi.n	8004bec <_fflush_r+0xc>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	059b      	lsls	r3, r3, #22
 8004c26:	d4e1      	bmi.n	8004bec <_fflush_r+0xc>
 8004c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c2a:	f7ff fb86 	bl	800433a <__retarget_lock_release_recursive>
 8004c2e:	e7dd      	b.n	8004bec <_fflush_r+0xc>

08004c30 <__swbuf_r>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	460e      	mov	r6, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	4605      	mov	r5, r0
 8004c38:	b118      	cbz	r0, 8004c42 <__swbuf_r+0x12>
 8004c3a:	6a03      	ldr	r3, [r0, #32]
 8004c3c:	b90b      	cbnz	r3, 8004c42 <__swbuf_r+0x12>
 8004c3e:	f7ff fa77 	bl	8004130 <__sinit>
 8004c42:	69a3      	ldr	r3, [r4, #24]
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	071a      	lsls	r2, r3, #28
 8004c4a:	d525      	bpl.n	8004c98 <__swbuf_r+0x68>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	b31b      	cbz	r3, 8004c98 <__swbuf_r+0x68>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	6922      	ldr	r2, [r4, #16]
 8004c54:	1a98      	subs	r0, r3, r2
 8004c56:	6963      	ldr	r3, [r4, #20]
 8004c58:	b2f6      	uxtb	r6, r6
 8004c5a:	4283      	cmp	r3, r0
 8004c5c:	4637      	mov	r7, r6
 8004c5e:	dc04      	bgt.n	8004c6a <__swbuf_r+0x3a>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f7ff ffbc 	bl	8004be0 <_fflush_r>
 8004c68:	b9e0      	cbnz	r0, 8004ca4 <__swbuf_r+0x74>
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	60a3      	str	r3, [r4, #8]
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	6022      	str	r2, [r4, #0]
 8004c76:	701e      	strb	r6, [r3, #0]
 8004c78:	6962      	ldr	r2, [r4, #20]
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d004      	beq.n	8004c8a <__swbuf_r+0x5a>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	07db      	lsls	r3, r3, #31
 8004c84:	d506      	bpl.n	8004c94 <__swbuf_r+0x64>
 8004c86:	2e0a      	cmp	r6, #10
 8004c88:	d104      	bne.n	8004c94 <__swbuf_r+0x64>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f7ff ffa7 	bl	8004be0 <_fflush_r>
 8004c92:	b938      	cbnz	r0, 8004ca4 <__swbuf_r+0x74>
 8004c94:	4638      	mov	r0, r7
 8004c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f806 	bl	8004cac <__swsetup_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0d5      	beq.n	8004c50 <__swbuf_r+0x20>
 8004ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca8:	e7f4      	b.n	8004c94 <__swbuf_r+0x64>
	...

08004cac <__swsetup_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <__swsetup_r+0xac>)
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	b118      	cbz	r0, 8004cc0 <__swsetup_r+0x14>
 8004cb8:	6a03      	ldr	r3, [r0, #32]
 8004cba:	b90b      	cbnz	r3, 8004cc0 <__swsetup_r+0x14>
 8004cbc:	f7ff fa38 	bl	8004130 <__sinit>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc6:	0718      	lsls	r0, r3, #28
 8004cc8:	d422      	bmi.n	8004d10 <__swsetup_r+0x64>
 8004cca:	06d9      	lsls	r1, r3, #27
 8004ccc:	d407      	bmi.n	8004cde <__swsetup_r+0x32>
 8004cce:	2309      	movs	r3, #9
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	e034      	b.n	8004d48 <__swsetup_r+0x9c>
 8004cde:	0758      	lsls	r0, r3, #29
 8004ce0:	d512      	bpl.n	8004d08 <__swsetup_r+0x5c>
 8004ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ce4:	b141      	cbz	r1, 8004cf8 <__swsetup_r+0x4c>
 8004ce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cea:	4299      	cmp	r1, r3
 8004cec:	d002      	beq.n	8004cf4 <__swsetup_r+0x48>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f7ff fb24 	bl	800433c <_free_r>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6363      	str	r3, [r4, #52]	; 0x34
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	2300      	movs	r3, #0
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	6923      	ldr	r3, [r4, #16]
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	f043 0308 	orr.w	r3, r3, #8
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	b94b      	cbnz	r3, 8004d28 <__swsetup_r+0x7c>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1e:	d003      	beq.n	8004d28 <__swsetup_r+0x7c>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 f850 	bl	8004dc8 <__smakebuf_r>
 8004d28:	89a0      	ldrh	r0, [r4, #12]
 8004d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d2e:	f010 0301 	ands.w	r3, r0, #1
 8004d32:	d00a      	beq.n	8004d4a <__swsetup_r+0x9e>
 8004d34:	2300      	movs	r3, #0
 8004d36:	60a3      	str	r3, [r4, #8]
 8004d38:	6963      	ldr	r3, [r4, #20]
 8004d3a:	425b      	negs	r3, r3
 8004d3c:	61a3      	str	r3, [r4, #24]
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	b943      	cbnz	r3, 8004d54 <__swsetup_r+0xa8>
 8004d42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d46:	d1c4      	bne.n	8004cd2 <__swsetup_r+0x26>
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	0781      	lsls	r1, r0, #30
 8004d4c:	bf58      	it	pl
 8004d4e:	6963      	ldrpl	r3, [r4, #20]
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	e7f4      	b.n	8004d3e <__swsetup_r+0x92>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e7f7      	b.n	8004d48 <__swsetup_r+0x9c>
 8004d58:	20000068 	.word	0x20000068

08004d5c <_sbrk_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <_sbrk_r+0x1c>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fb fdf4 	bl	8000954 <_sbrk>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_sbrk_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_sbrk_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	20000fb4 	.word	0x20000fb4

08004d7c <__swhatbuf_r>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	460c      	mov	r4, r1
 8004d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d84:	2900      	cmp	r1, #0
 8004d86:	b096      	sub	sp, #88	; 0x58
 8004d88:	4615      	mov	r5, r2
 8004d8a:	461e      	mov	r6, r3
 8004d8c:	da0d      	bge.n	8004daa <__swhatbuf_r+0x2e>
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	bf0c      	ite	eq
 8004d9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d9e:	2340      	movne	r3, #64	; 0x40
 8004da0:	2000      	movs	r0, #0
 8004da2:	6031      	str	r1, [r6, #0]
 8004da4:	602b      	str	r3, [r5, #0]
 8004da6:	b016      	add	sp, #88	; 0x58
 8004da8:	bd70      	pop	{r4, r5, r6, pc}
 8004daa:	466a      	mov	r2, sp
 8004dac:	f000 f848 	bl	8004e40 <_fstat_r>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	dbec      	blt.n	8004d8e <__swhatbuf_r+0x12>
 8004db4:	9901      	ldr	r1, [sp, #4]
 8004db6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004dba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004dbe:	4259      	negs	r1, r3
 8004dc0:	4159      	adcs	r1, r3
 8004dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc6:	e7eb      	b.n	8004da0 <__swhatbuf_r+0x24>

08004dc8 <__smakebuf_r>:
 8004dc8:	898b      	ldrh	r3, [r1, #12]
 8004dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dcc:	079d      	lsls	r5, r3, #30
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	d507      	bpl.n	8004de4 <__smakebuf_r+0x1c>
 8004dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	6123      	str	r3, [r4, #16]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	6163      	str	r3, [r4, #20]
 8004de0:	b002      	add	sp, #8
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	ab01      	add	r3, sp, #4
 8004de6:	466a      	mov	r2, sp
 8004de8:	f7ff ffc8 	bl	8004d7c <__swhatbuf_r>
 8004dec:	9900      	ldr	r1, [sp, #0]
 8004dee:	4605      	mov	r5, r0
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff fb0f 	bl	8004414 <_malloc_r>
 8004df6:	b948      	cbnz	r0, 8004e0c <__smakebuf_r+0x44>
 8004df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dfc:	059a      	lsls	r2, r3, #22
 8004dfe:	d4ef      	bmi.n	8004de0 <__smakebuf_r+0x18>
 8004e00:	f023 0303 	bic.w	r3, r3, #3
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	e7e3      	b.n	8004dd4 <__smakebuf_r+0xc>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	6020      	str	r0, [r4, #0]
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	9b00      	ldr	r3, [sp, #0]
 8004e18:	6163      	str	r3, [r4, #20]
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	6120      	str	r0, [r4, #16]
 8004e1e:	b15b      	cbz	r3, 8004e38 <__smakebuf_r+0x70>
 8004e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f81d 	bl	8004e64 <_isatty_r>
 8004e2a:	b128      	cbz	r0, 8004e38 <__smakebuf_r+0x70>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	431d      	orrs	r5, r3
 8004e3c:	81a5      	strh	r5, [r4, #12]
 8004e3e:	e7cf      	b.n	8004de0 <__smakebuf_r+0x18>

08004e40 <_fstat_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d07      	ldr	r5, [pc, #28]	; (8004e60 <_fstat_r+0x20>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	f7fb fd59 	bl	8000904 <_fstat>
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	d102      	bne.n	8004e5c <_fstat_r+0x1c>
 8004e56:	682b      	ldr	r3, [r5, #0]
 8004e58:	b103      	cbz	r3, 8004e5c <_fstat_r+0x1c>
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	bd38      	pop	{r3, r4, r5, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000fb4 	.word	0x20000fb4

08004e64 <_isatty_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4d06      	ldr	r5, [pc, #24]	; (8004e80 <_isatty_r+0x1c>)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	f7fb fd58 	bl	8000924 <_isatty>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_isatty_r+0x1a>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_isatty_r+0x1a>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	20000fb4 	.word	0x20000fb4

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
